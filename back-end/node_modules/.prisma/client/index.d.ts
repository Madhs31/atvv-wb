
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model Produto
 * 
 */
export type Produto = $Result.DefaultSelection<Prisma.$ProdutoPayload>
/**
 * Model Servico
 * 
 */
export type Servico = $Result.DefaultSelection<Prisma.$ServicoPayload>
/**
 * Model ClienteProduto
 * 
 */
export type ClienteProduto = $Result.DefaultSelection<Prisma.$ClienteProdutoPayload>
/**
 * Model ClienteServico
 * 
 */
export type ClienteServico = $Result.DefaultSelection<Prisma.$ClienteServicoPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Clientes
 * const clientes = await prisma.cliente.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Clientes
   * const clientes = await prisma.cliente.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **Produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.ProdutoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.servico`: Exposes CRUD operations for the **Servico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Servicos
    * const servicos = await prisma.servico.findMany()
    * ```
    */
  get servico(): Prisma.ServicoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clienteProduto`: Exposes CRUD operations for the **ClienteProduto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClienteProdutos
    * const clienteProdutos = await prisma.clienteProduto.findMany()
    * ```
    */
  get clienteProduto(): Prisma.ClienteProdutoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clienteServico`: Exposes CRUD operations for the **ClienteServico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClienteServicos
    * const clienteServicos = await prisma.clienteServico.findMany()
    * ```
    */
  get clienteServico(): Prisma.ClienteServicoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Cliente: 'Cliente',
    Produto: 'Produto',
    Servico: 'Servico',
    ClienteProduto: 'ClienteProduto',
    ClienteServico: 'ClienteServico'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "cliente" | "produto" | "servico" | "clienteProduto" | "clienteServico"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Produto: {
        payload: Prisma.$ProdutoPayload<ExtArgs>
        fields: Prisma.ProdutoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findFirst: {
            args: Prisma.ProdutoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          findMany: {
            args: Prisma.ProdutoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>[]
          }
          create: {
            args: Prisma.ProdutoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          createMany: {
            args: Prisma.ProdutoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProdutoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          update: {
            args: Prisma.ProdutoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          deleteMany: {
            args: Prisma.ProdutoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdutoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoPayload>
          }
          aggregate: {
            args: Prisma.ProdutoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduto>
          }
          groupBy: {
            args: Prisma.ProdutoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutoCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutoCountAggregateOutputType> | number
          }
        }
      }
      Servico: {
        payload: Prisma.$ServicoPayload<ExtArgs>
        fields: Prisma.ServicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>
          }
          findFirst: {
            args: Prisma.ServicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>
          }
          findMany: {
            args: Prisma.ServicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>[]
          }
          create: {
            args: Prisma.ServicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>
          }
          createMany: {
            args: Prisma.ServicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ServicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>
          }
          update: {
            args: Prisma.ServicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>
          }
          deleteMany: {
            args: Prisma.ServicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ServicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicoPayload>
          }
          aggregate: {
            args: Prisma.ServicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServico>
          }
          groupBy: {
            args: Prisma.ServicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServicoCountArgs<ExtArgs>
            result: $Utils.Optional<ServicoCountAggregateOutputType> | number
          }
        }
      }
      ClienteProduto: {
        payload: Prisma.$ClienteProdutoPayload<ExtArgs>
        fields: Prisma.ClienteProdutoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteProdutoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteProdutoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteProdutoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteProdutoPayload>
          }
          findFirst: {
            args: Prisma.ClienteProdutoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteProdutoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteProdutoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteProdutoPayload>
          }
          findMany: {
            args: Prisma.ClienteProdutoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteProdutoPayload>[]
          }
          create: {
            args: Prisma.ClienteProdutoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteProdutoPayload>
          }
          createMany: {
            args: Prisma.ClienteProdutoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClienteProdutoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteProdutoPayload>
          }
          update: {
            args: Prisma.ClienteProdutoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteProdutoPayload>
          }
          deleteMany: {
            args: Prisma.ClienteProdutoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteProdutoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteProdutoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteProdutoPayload>
          }
          aggregate: {
            args: Prisma.ClienteProdutoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClienteProduto>
          }
          groupBy: {
            args: Prisma.ClienteProdutoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteProdutoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteProdutoCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteProdutoCountAggregateOutputType> | number
          }
        }
      }
      ClienteServico: {
        payload: Prisma.$ClienteServicoPayload<ExtArgs>
        fields: Prisma.ClienteServicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteServicoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteServicoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicoPayload>
          }
          findFirst: {
            args: Prisma.ClienteServicoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteServicoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicoPayload>
          }
          findMany: {
            args: Prisma.ClienteServicoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicoPayload>[]
          }
          create: {
            args: Prisma.ClienteServicoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicoPayload>
          }
          createMany: {
            args: Prisma.ClienteServicoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClienteServicoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicoPayload>
          }
          update: {
            args: Prisma.ClienteServicoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicoPayload>
          }
          deleteMany: {
            args: Prisma.ClienteServicoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteServicoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteServicoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClienteServicoPayload>
          }
          aggregate: {
            args: Prisma.ClienteServicoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClienteServico>
          }
          groupBy: {
            args: Prisma.ClienteServicoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteServicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteServicoCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteServicoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    cliente?: ClienteOmit
    produto?: ProdutoOmit
    servico?: ServicoOmit
    clienteProduto?: ClienteProdutoOmit
    clienteServico?: ClienteServicoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClienteCountOutputType
   */

  export type ClienteCountOutputType = {
    produtos: number
    servicos: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produtos?: boolean | ClienteCountOutputTypeCountProdutosArgs
    servicos?: boolean | ClienteCountOutputTypeCountServicosArgs
  }

  // Custom InputTypes
  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteProdutoWhereInput
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountServicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteServicoWhereInput
  }


  /**
   * Count Type ProdutoCountOutputType
   */

  export type ProdutoCountOutputType = {
    clientes: number
  }

  export type ProdutoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | ProdutoCountOutputTypeCountClientesArgs
  }

  // Custom InputTypes
  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCountOutputType
     */
    select?: ProdutoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeCountClientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteProdutoWhereInput
  }


  /**
   * Count Type ServicoCountOutputType
   */

  export type ServicoCountOutputType = {
    clientes: number
  }

  export type ServicoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | ServicoCountOutputTypeCountClientesArgs
  }

  // Custom InputTypes
  /**
   * ServicoCountOutputType without action
   */
  export type ServicoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicoCountOutputType
     */
    select?: ServicoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServicoCountOutputType without action
   */
  export type ServicoCountOutputTypeCountClientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteServicoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    nome: string | null
    nomeSocial: string | null
    genero: string | null
    cpf: string | null
    rg: string | null
    telefone: string | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    nomeSocial: string | null
    genero: string | null
    cpf: string | null
    rg: string | null
    telefone: string | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    nome: number
    nomeSocial: number
    genero: number
    cpf: number
    rg: number
    telefone: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    nome?: true
    nomeSocial?: true
    genero?: true
    cpf?: true
    rg?: true
    telefone?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    nome?: true
    nomeSocial?: true
    genero?: true
    cpf?: true
    rg?: true
    telefone?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    nome?: true
    nomeSocial?: true
    genero?: true
    cpf?: true
    rg?: true
    telefone?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id: number
    nome: string
    nomeSocial: string
    genero: string
    cpf: string
    rg: string
    telefone: string
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    nomeSocial?: boolean
    genero?: boolean
    cpf?: boolean
    rg?: boolean
    telefone?: boolean
    produtos?: boolean | Cliente$produtosArgs<ExtArgs>
    servicos?: boolean | Cliente$servicosArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>



  export type ClienteSelectScalar = {
    id?: boolean
    nome?: boolean
    nomeSocial?: boolean
    genero?: boolean
    cpf?: boolean
    rg?: boolean
    telefone?: boolean
  }

  export type ClienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "nomeSocial" | "genero" | "cpf" | "rg" | "telefone", ExtArgs["result"]["cliente"]>
  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produtos?: boolean | Cliente$produtosArgs<ExtArgs>
    servicos?: boolean | Cliente$servicosArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      produtos: Prisma.$ClienteProdutoPayload<ExtArgs>[]
      servicos: Prisma.$ClienteServicoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      nomeSocial: string
      genero: string
      cpf: string
      rg: string
      telefone: string
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteFindUniqueArgs>(args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteFindFirstArgs>(args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteFindManyArgs>(args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
     */
    create<T extends ClienteCreateArgs>(args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clientes.
     * @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteCreateManyArgs>(args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
     */
    delete<T extends ClienteDeleteArgs>(args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteUpdateArgs>(args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteDeleteManyArgs>(args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteUpdateManyArgs>(args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
     */
    upsert<T extends ClienteUpsertArgs>(args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    produtos<T extends Cliente$produtosArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$produtosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteProdutoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    servicos<T extends Cliente$servicosArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$servicosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteServicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cliente model
   */
  interface ClienteFieldRefs {
    readonly id: FieldRef<"Cliente", 'Int'>
    readonly nome: FieldRef<"Cliente", 'String'>
    readonly nomeSocial: FieldRef<"Cliente", 'String'>
    readonly genero: FieldRef<"Cliente", 'String'>
    readonly cpf: FieldRef<"Cliente", 'String'>
    readonly rg: FieldRef<"Cliente", 'String'>
    readonly telefone: FieldRef<"Cliente", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }

  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to update.
     */
    limit?: number
  }

  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }

  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to delete.
     */
    limit?: number
  }

  /**
   * Cliente.produtos
   */
  export type Cliente$produtosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteProduto
     */
    select?: ClienteProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteProduto
     */
    omit?: ClienteProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteProdutoInclude<ExtArgs> | null
    where?: ClienteProdutoWhereInput
    orderBy?: ClienteProdutoOrderByWithRelationInput | ClienteProdutoOrderByWithRelationInput[]
    cursor?: ClienteProdutoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteProdutoScalarFieldEnum | ClienteProdutoScalarFieldEnum[]
  }

  /**
   * Cliente.servicos
   */
  export type Cliente$servicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServico
     */
    select?: ClienteServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteServico
     */
    omit?: ClienteServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicoInclude<ExtArgs> | null
    where?: ClienteServicoWhereInput
    orderBy?: ClienteServicoOrderByWithRelationInput | ClienteServicoOrderByWithRelationInput[]
    cursor?: ClienteServicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteServicoScalarFieldEnum | ClienteServicoScalarFieldEnum[]
  }

  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
  }


  /**
   * Model Produto
   */

  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    valor: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    valor: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    id: string | null
    nome: string | null
    descricao: string | null
    valor: number | null
  }

  export type ProdutoMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    descricao: string | null
    valor: number | null
  }

  export type ProdutoCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    valor: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    valor?: true
  }

  export type ProdutoSumAggregateInputType = {
    valor?: true
  }

  export type ProdutoMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    valor?: true
  }

  export type ProdutoMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    valor?: true
  }

  export type ProdutoCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    valor?: true
    _all?: true
  }

  export type ProdutoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produto to aggregate.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type ProdutoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoWhereInput
    orderBy?: ProdutoOrderByWithAggregationInput | ProdutoOrderByWithAggregationInput[]
    by: ProdutoScalarFieldEnum[] | ProdutoScalarFieldEnum
    having?: ProdutoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }

  export type ProdutoGroupByOutputType = {
    id: string
    nome: string
    descricao: string
    valor: number
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends ProdutoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    valor?: boolean
    clientes?: boolean | Produto$clientesArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produto"]>



  export type ProdutoSelectScalar = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
    valor?: boolean
  }

  export type ProdutoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "descricao" | "valor", ExtArgs["result"]["produto"]>
  export type ProdutoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | Produto$clientesArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProdutoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produto"
    objects: {
      clientes: Prisma.$ClienteProdutoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      descricao: string
      valor: number
    }, ExtArgs["result"]["produto"]>
    composites: {}
  }

  type ProdutoGetPayload<S extends boolean | null | undefined | ProdutoDefaultArgs> = $Result.GetResult<Prisma.$ProdutoPayload, S>

  type ProdutoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProdutoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProdutoCountAggregateInputType | true
    }

  export interface ProdutoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produto'], meta: { name: 'Produto' } }
    /**
     * Find zero or one Produto that matches the filter.
     * @param {ProdutoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutoFindUniqueArgs>(args: SelectSubset<T, ProdutoFindUniqueArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Produto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProdutoFindUniqueOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutoFindFirstArgs>(args?: SelectSubset<T, ProdutoFindFirstArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Produto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindFirstOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtoWithIdOnly = await prisma.produto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdutoFindManyArgs>(args?: SelectSubset<T, ProdutoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Produto.
     * @param {ProdutoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
     */
    create<T extends ProdutoCreateArgs>(args: SelectSubset<T, ProdutoCreateArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Produtos.
     * @param {ProdutoCreateManyArgs} args - Arguments to create many Produtos.
     * @example
     * // Create many Produtos
     * const produto = await prisma.produto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutoCreateManyArgs>(args?: SelectSubset<T, ProdutoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produto.
     * @param {ProdutoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
     */
    delete<T extends ProdutoDeleteArgs>(args: SelectSubset<T, ProdutoDeleteArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Produto.
     * @param {ProdutoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutoUpdateArgs>(args: SelectSubset<T, ProdutoUpdateArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutoDeleteManyArgs>(args?: SelectSubset<T, ProdutoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutoUpdateManyArgs>(args: SelectSubset<T, ProdutoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto.
     * @param {ProdutoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
     */
    upsert<T extends ProdutoUpsertArgs>(args: SelectSubset<T, ProdutoUpsertArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutoCountArgs>(
      args?: Subset<T, ProdutoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): Prisma.PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produto model
   */
  readonly fields: ProdutoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clientes<T extends Produto$clientesArgs<ExtArgs> = {}>(args?: Subset<T, Produto$clientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteProdutoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Produto model
   */
  interface ProdutoFieldRefs {
    readonly id: FieldRef<"Produto", 'String'>
    readonly nome: FieldRef<"Produto", 'String'>
    readonly descricao: FieldRef<"Produto", 'String'>
    readonly valor: FieldRef<"Produto", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Produto findUnique
   */
  export type ProdutoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto findUniqueOrThrow
   */
  export type ProdutoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto findFirst
   */
  export type ProdutoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto findFirstOrThrow
   */
  export type ProdutoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produto to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto findMany
   */
  export type ProdutoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutoOrderByWithRelationInput | ProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }

  /**
   * Produto create
   */
  export type ProdutoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to create a Produto.
     */
    data: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
  }

  /**
   * Produto createMany
   */
  export type ProdutoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produtos.
     */
    data: ProdutoCreateManyInput | ProdutoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produto update
   */
  export type ProdutoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The data needed to update a Produto.
     */
    data: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
    /**
     * Choose, which Produto to update.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto updateMany
   */
  export type ProdutoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutoUpdateManyMutationInput, ProdutoUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutoWhereInput
    /**
     * Limit how many Produtos to update.
     */
    limit?: number
  }

  /**
   * Produto upsert
   */
  export type ProdutoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * The filter to search for the Produto to update in case it exists.
     */
    where: ProdutoWhereUniqueInput
    /**
     * In case the Produto found by the `where` argument doesn't exist, create a new Produto with this data.
     */
    create: XOR<ProdutoCreateInput, ProdutoUncheckedCreateInput>
    /**
     * In case the Produto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoUpdateInput, ProdutoUncheckedUpdateInput>
  }

  /**
   * Produto delete
   */
  export type ProdutoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
    /**
     * Filter which Produto to delete.
     */
    where: ProdutoWhereUniqueInput
  }

  /**
   * Produto deleteMany
   */
  export type ProdutoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutoWhereInput
    /**
     * Limit how many Produtos to delete.
     */
    limit?: number
  }

  /**
   * Produto.clientes
   */
  export type Produto$clientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteProduto
     */
    select?: ClienteProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteProduto
     */
    omit?: ClienteProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteProdutoInclude<ExtArgs> | null
    where?: ClienteProdutoWhereInput
    orderBy?: ClienteProdutoOrderByWithRelationInput | ClienteProdutoOrderByWithRelationInput[]
    cursor?: ClienteProdutoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteProdutoScalarFieldEnum | ClienteProdutoScalarFieldEnum[]
  }

  /**
   * Produto without action
   */
  export type ProdutoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produto
     */
    select?: ProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Produto
     */
    omit?: ProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoInclude<ExtArgs> | null
  }


  /**
   * Model Servico
   */

  export type AggregateServico = {
    _count: ServicoCountAggregateOutputType | null
    _avg: ServicoAvgAggregateOutputType | null
    _sum: ServicoSumAggregateOutputType | null
    _min: ServicoMinAggregateOutputType | null
    _max: ServicoMaxAggregateOutputType | null
  }

  export type ServicoAvgAggregateOutputType = {
    valor: number | null
  }

  export type ServicoSumAggregateOutputType = {
    valor: number | null
  }

  export type ServicoMinAggregateOutputType = {
    id: string | null
    nome: string | null
    descricao: string | null
    valor: number | null
  }

  export type ServicoMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    descricao: string | null
    valor: number | null
  }

  export type ServicoCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    valor: number
    _all: number
  }


  export type ServicoAvgAggregateInputType = {
    valor?: true
  }

  export type ServicoSumAggregateInputType = {
    valor?: true
  }

  export type ServicoMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    valor?: true
  }

  export type ServicoMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    valor?: true
  }

  export type ServicoCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    valor?: true
    _all?: true
  }

  export type ServicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servico to aggregate.
     */
    where?: ServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicos to fetch.
     */
    orderBy?: ServicoOrderByWithRelationInput | ServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Servicos
    **/
    _count?: true | ServicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicoMaxAggregateInputType
  }

  export type GetServicoAggregateType<T extends ServicoAggregateArgs> = {
        [P in keyof T & keyof AggregateServico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServico[P]>
      : GetScalarType<T[P], AggregateServico[P]>
  }




  export type ServicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicoWhereInput
    orderBy?: ServicoOrderByWithAggregationInput | ServicoOrderByWithAggregationInput[]
    by: ServicoScalarFieldEnum[] | ServicoScalarFieldEnum
    having?: ServicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicoCountAggregateInputType | true
    _avg?: ServicoAvgAggregateInputType
    _sum?: ServicoSumAggregateInputType
    _min?: ServicoMinAggregateInputType
    _max?: ServicoMaxAggregateInputType
  }

  export type ServicoGroupByOutputType = {
    id: string
    nome: string
    descricao: string
    valor: number
    _count: ServicoCountAggregateOutputType | null
    _avg: ServicoAvgAggregateOutputType | null
    _sum: ServicoSumAggregateOutputType | null
    _min: ServicoMinAggregateOutputType | null
    _max: ServicoMaxAggregateOutputType | null
  }

  type GetServicoGroupByPayload<T extends ServicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicoGroupByOutputType[P]>
            : GetScalarType<T[P], ServicoGroupByOutputType[P]>
        }
      >
    >


  export type ServicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    valor?: boolean
    clientes?: boolean | Servico$clientesArgs<ExtArgs>
    _count?: boolean | ServicoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["servico"]>



  export type ServicoSelectScalar = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
    valor?: boolean
  }

  export type ServicoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "descricao" | "valor", ExtArgs["result"]["servico"]>
  export type ServicoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | Servico$clientesArgs<ExtArgs>
    _count?: boolean | ServicoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ServicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Servico"
    objects: {
      clientes: Prisma.$ClienteServicoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      descricao: string
      valor: number
    }, ExtArgs["result"]["servico"]>
    composites: {}
  }

  type ServicoGetPayload<S extends boolean | null | undefined | ServicoDefaultArgs> = $Result.GetResult<Prisma.$ServicoPayload, S>

  type ServicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServicoCountAggregateInputType | true
    }

  export interface ServicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Servico'], meta: { name: 'Servico' } }
    /**
     * Find zero or one Servico that matches the filter.
     * @param {ServicoFindUniqueArgs} args - Arguments to find a Servico
     * @example
     * // Get one Servico
     * const servico = await prisma.servico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServicoFindUniqueArgs>(args: SelectSubset<T, ServicoFindUniqueArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Servico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServicoFindUniqueOrThrowArgs} args - Arguments to find a Servico
     * @example
     * // Get one Servico
     * const servico = await prisma.servico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServicoFindUniqueOrThrowArgs>(args: SelectSubset<T, ServicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Servico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoFindFirstArgs} args - Arguments to find a Servico
     * @example
     * // Get one Servico
     * const servico = await prisma.servico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServicoFindFirstArgs>(args?: SelectSubset<T, ServicoFindFirstArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Servico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoFindFirstOrThrowArgs} args - Arguments to find a Servico
     * @example
     * // Get one Servico
     * const servico = await prisma.servico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServicoFindFirstOrThrowArgs>(args?: SelectSubset<T, ServicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Servicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Servicos
     * const servicos = await prisma.servico.findMany()
     * 
     * // Get first 10 Servicos
     * const servicos = await prisma.servico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicoWithIdOnly = await prisma.servico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServicoFindManyArgs>(args?: SelectSubset<T, ServicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Servico.
     * @param {ServicoCreateArgs} args - Arguments to create a Servico.
     * @example
     * // Create one Servico
     * const Servico = await prisma.servico.create({
     *   data: {
     *     // ... data to create a Servico
     *   }
     * })
     * 
     */
    create<T extends ServicoCreateArgs>(args: SelectSubset<T, ServicoCreateArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Servicos.
     * @param {ServicoCreateManyArgs} args - Arguments to create many Servicos.
     * @example
     * // Create many Servicos
     * const servico = await prisma.servico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServicoCreateManyArgs>(args?: SelectSubset<T, ServicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Servico.
     * @param {ServicoDeleteArgs} args - Arguments to delete one Servico.
     * @example
     * // Delete one Servico
     * const Servico = await prisma.servico.delete({
     *   where: {
     *     // ... filter to delete one Servico
     *   }
     * })
     * 
     */
    delete<T extends ServicoDeleteArgs>(args: SelectSubset<T, ServicoDeleteArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Servico.
     * @param {ServicoUpdateArgs} args - Arguments to update one Servico.
     * @example
     * // Update one Servico
     * const servico = await prisma.servico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServicoUpdateArgs>(args: SelectSubset<T, ServicoUpdateArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Servicos.
     * @param {ServicoDeleteManyArgs} args - Arguments to filter Servicos to delete.
     * @example
     * // Delete a few Servicos
     * const { count } = await prisma.servico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServicoDeleteManyArgs>(args?: SelectSubset<T, ServicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Servicos
     * const servico = await prisma.servico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServicoUpdateManyArgs>(args: SelectSubset<T, ServicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Servico.
     * @param {ServicoUpsertArgs} args - Arguments to update or create a Servico.
     * @example
     * // Update or create a Servico
     * const servico = await prisma.servico.upsert({
     *   create: {
     *     // ... data to create a Servico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Servico we want to update
     *   }
     * })
     */
    upsert<T extends ServicoUpsertArgs>(args: SelectSubset<T, ServicoUpsertArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Servicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoCountArgs} args - Arguments to filter Servicos to count.
     * @example
     * // Count the number of Servicos
     * const count = await prisma.servico.count({
     *   where: {
     *     // ... the filter for the Servicos we want to count
     *   }
     * })
    **/
    count<T extends ServicoCountArgs>(
      args?: Subset<T, ServicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Servico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicoAggregateArgs>(args: Subset<T, ServicoAggregateArgs>): Prisma.PrismaPromise<GetServicoAggregateType<T>>

    /**
     * Group by Servico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServicoGroupByArgs['orderBy'] }
        : { orderBy?: ServicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Servico model
   */
  readonly fields: ServicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Servico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clientes<T extends Servico$clientesArgs<ExtArgs> = {}>(args?: Subset<T, Servico$clientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteServicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Servico model
   */
  interface ServicoFieldRefs {
    readonly id: FieldRef<"Servico", 'String'>
    readonly nome: FieldRef<"Servico", 'String'>
    readonly descricao: FieldRef<"Servico", 'String'>
    readonly valor: FieldRef<"Servico", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Servico findUnique
   */
  export type ServicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * Filter, which Servico to fetch.
     */
    where: ServicoWhereUniqueInput
  }

  /**
   * Servico findUniqueOrThrow
   */
  export type ServicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * Filter, which Servico to fetch.
     */
    where: ServicoWhereUniqueInput
  }

  /**
   * Servico findFirst
   */
  export type ServicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * Filter, which Servico to fetch.
     */
    where?: ServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicos to fetch.
     */
    orderBy?: ServicoOrderByWithRelationInput | ServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicos.
     */
    cursor?: ServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicos.
     */
    distinct?: ServicoScalarFieldEnum | ServicoScalarFieldEnum[]
  }

  /**
   * Servico findFirstOrThrow
   */
  export type ServicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * Filter, which Servico to fetch.
     */
    where?: ServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicos to fetch.
     */
    orderBy?: ServicoOrderByWithRelationInput | ServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servicos.
     */
    cursor?: ServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servicos.
     */
    distinct?: ServicoScalarFieldEnum | ServicoScalarFieldEnum[]
  }

  /**
   * Servico findMany
   */
  export type ServicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * Filter, which Servicos to fetch.
     */
    where?: ServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servicos to fetch.
     */
    orderBy?: ServicoOrderByWithRelationInput | ServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Servicos.
     */
    cursor?: ServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servicos.
     */
    skip?: number
    distinct?: ServicoScalarFieldEnum | ServicoScalarFieldEnum[]
  }

  /**
   * Servico create
   */
  export type ServicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * The data needed to create a Servico.
     */
    data: XOR<ServicoCreateInput, ServicoUncheckedCreateInput>
  }

  /**
   * Servico createMany
   */
  export type ServicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Servicos.
     */
    data: ServicoCreateManyInput | ServicoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Servico update
   */
  export type ServicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * The data needed to update a Servico.
     */
    data: XOR<ServicoUpdateInput, ServicoUncheckedUpdateInput>
    /**
     * Choose, which Servico to update.
     */
    where: ServicoWhereUniqueInput
  }

  /**
   * Servico updateMany
   */
  export type ServicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Servicos.
     */
    data: XOR<ServicoUpdateManyMutationInput, ServicoUncheckedUpdateManyInput>
    /**
     * Filter which Servicos to update
     */
    where?: ServicoWhereInput
    /**
     * Limit how many Servicos to update.
     */
    limit?: number
  }

  /**
   * Servico upsert
   */
  export type ServicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * The filter to search for the Servico to update in case it exists.
     */
    where: ServicoWhereUniqueInput
    /**
     * In case the Servico found by the `where` argument doesn't exist, create a new Servico with this data.
     */
    create: XOR<ServicoCreateInput, ServicoUncheckedCreateInput>
    /**
     * In case the Servico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServicoUpdateInput, ServicoUncheckedUpdateInput>
  }

  /**
   * Servico delete
   */
  export type ServicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
    /**
     * Filter which Servico to delete.
     */
    where: ServicoWhereUniqueInput
  }

  /**
   * Servico deleteMany
   */
  export type ServicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servicos to delete
     */
    where?: ServicoWhereInput
    /**
     * Limit how many Servicos to delete.
     */
    limit?: number
  }

  /**
   * Servico.clientes
   */
  export type Servico$clientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServico
     */
    select?: ClienteServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteServico
     */
    omit?: ClienteServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicoInclude<ExtArgs> | null
    where?: ClienteServicoWhereInput
    orderBy?: ClienteServicoOrderByWithRelationInput | ClienteServicoOrderByWithRelationInput[]
    cursor?: ClienteServicoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteServicoScalarFieldEnum | ClienteServicoScalarFieldEnum[]
  }

  /**
   * Servico without action
   */
  export type ServicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Servico
     */
    select?: ServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Servico
     */
    omit?: ServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServicoInclude<ExtArgs> | null
  }


  /**
   * Model ClienteProduto
   */

  export type AggregateClienteProduto = {
    _count: ClienteProdutoCountAggregateOutputType | null
    _avg: ClienteProdutoAvgAggregateOutputType | null
    _sum: ClienteProdutoSumAggregateOutputType | null
    _min: ClienteProdutoMinAggregateOutputType | null
    _max: ClienteProdutoMaxAggregateOutputType | null
  }

  export type ClienteProdutoAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
    quantidade: number | null
  }

  export type ClienteProdutoSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
    quantidade: number | null
  }

  export type ClienteProdutoMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
    produtoId: string | null
    quantidade: number | null
  }

  export type ClienteProdutoMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
    produtoId: string | null
    quantidade: number | null
  }

  export type ClienteProdutoCountAggregateOutputType = {
    id: number
    clienteId: number
    produtoId: number
    quantidade: number
    _all: number
  }


  export type ClienteProdutoAvgAggregateInputType = {
    id?: true
    clienteId?: true
    quantidade?: true
  }

  export type ClienteProdutoSumAggregateInputType = {
    id?: true
    clienteId?: true
    quantidade?: true
  }

  export type ClienteProdutoMinAggregateInputType = {
    id?: true
    clienteId?: true
    produtoId?: true
    quantidade?: true
  }

  export type ClienteProdutoMaxAggregateInputType = {
    id?: true
    clienteId?: true
    produtoId?: true
    quantidade?: true
  }

  export type ClienteProdutoCountAggregateInputType = {
    id?: true
    clienteId?: true
    produtoId?: true
    quantidade?: true
    _all?: true
  }

  export type ClienteProdutoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteProduto to aggregate.
     */
    where?: ClienteProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteProdutos to fetch.
     */
    orderBy?: ClienteProdutoOrderByWithRelationInput | ClienteProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClienteProdutos
    **/
    _count?: true | ClienteProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteProdutoMaxAggregateInputType
  }

  export type GetClienteProdutoAggregateType<T extends ClienteProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateClienteProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClienteProduto[P]>
      : GetScalarType<T[P], AggregateClienteProduto[P]>
  }




  export type ClienteProdutoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteProdutoWhereInput
    orderBy?: ClienteProdutoOrderByWithAggregationInput | ClienteProdutoOrderByWithAggregationInput[]
    by: ClienteProdutoScalarFieldEnum[] | ClienteProdutoScalarFieldEnum
    having?: ClienteProdutoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteProdutoCountAggregateInputType | true
    _avg?: ClienteProdutoAvgAggregateInputType
    _sum?: ClienteProdutoSumAggregateInputType
    _min?: ClienteProdutoMinAggregateInputType
    _max?: ClienteProdutoMaxAggregateInputType
  }

  export type ClienteProdutoGroupByOutputType = {
    id: number
    clienteId: number
    produtoId: string
    quantidade: number
    _count: ClienteProdutoCountAggregateOutputType | null
    _avg: ClienteProdutoAvgAggregateOutputType | null
    _sum: ClienteProdutoSumAggregateOutputType | null
    _min: ClienteProdutoMinAggregateOutputType | null
    _max: ClienteProdutoMaxAggregateOutputType | null
  }

  type GetClienteProdutoGroupByPayload<T extends ClienteProdutoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteProdutoGroupByOutputType[P]>
        }
      >
    >


  export type ClienteProdutoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    produtoId?: boolean
    quantidade?: boolean
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clienteProduto"]>



  export type ClienteProdutoSelectScalar = {
    id?: boolean
    clienteId?: boolean
    produtoId?: boolean
    quantidade?: boolean
  }

  export type ClienteProdutoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clienteId" | "produtoId" | "quantidade", ExtArgs["result"]["clienteProduto"]>
  export type ClienteProdutoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    produto?: boolean | ProdutoDefaultArgs<ExtArgs>
  }

  export type $ClienteProdutoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClienteProduto"
    objects: {
      cliente: Prisma.$ClientePayload<ExtArgs>
      produto: Prisma.$ProdutoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clienteId: number
      produtoId: string
      quantidade: number
    }, ExtArgs["result"]["clienteProduto"]>
    composites: {}
  }

  type ClienteProdutoGetPayload<S extends boolean | null | undefined | ClienteProdutoDefaultArgs> = $Result.GetResult<Prisma.$ClienteProdutoPayload, S>

  type ClienteProdutoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClienteProdutoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClienteProdutoCountAggregateInputType | true
    }

  export interface ClienteProdutoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClienteProduto'], meta: { name: 'ClienteProduto' } }
    /**
     * Find zero or one ClienteProduto that matches the filter.
     * @param {ClienteProdutoFindUniqueArgs} args - Arguments to find a ClienteProduto
     * @example
     * // Get one ClienteProduto
     * const clienteProduto = await prisma.clienteProduto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteProdutoFindUniqueArgs>(args: SelectSubset<T, ClienteProdutoFindUniqueArgs<ExtArgs>>): Prisma__ClienteProdutoClient<$Result.GetResult<Prisma.$ClienteProdutoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClienteProduto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClienteProdutoFindUniqueOrThrowArgs} args - Arguments to find a ClienteProduto
     * @example
     * // Get one ClienteProduto
     * const clienteProduto = await prisma.clienteProduto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteProdutoFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteProdutoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteProdutoClient<$Result.GetResult<Prisma.$ClienteProdutoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClienteProduto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteProdutoFindFirstArgs} args - Arguments to find a ClienteProduto
     * @example
     * // Get one ClienteProduto
     * const clienteProduto = await prisma.clienteProduto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteProdutoFindFirstArgs>(args?: SelectSubset<T, ClienteProdutoFindFirstArgs<ExtArgs>>): Prisma__ClienteProdutoClient<$Result.GetResult<Prisma.$ClienteProdutoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClienteProduto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteProdutoFindFirstOrThrowArgs} args - Arguments to find a ClienteProduto
     * @example
     * // Get one ClienteProduto
     * const clienteProduto = await prisma.clienteProduto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteProdutoFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteProdutoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteProdutoClient<$Result.GetResult<Prisma.$ClienteProdutoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClienteProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteProdutoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClienteProdutos
     * const clienteProdutos = await prisma.clienteProduto.findMany()
     * 
     * // Get first 10 ClienteProdutos
     * const clienteProdutos = await prisma.clienteProduto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteProdutoWithIdOnly = await prisma.clienteProduto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteProdutoFindManyArgs>(args?: SelectSubset<T, ClienteProdutoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteProdutoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClienteProduto.
     * @param {ClienteProdutoCreateArgs} args - Arguments to create a ClienteProduto.
     * @example
     * // Create one ClienteProduto
     * const ClienteProduto = await prisma.clienteProduto.create({
     *   data: {
     *     // ... data to create a ClienteProduto
     *   }
     * })
     * 
     */
    create<T extends ClienteProdutoCreateArgs>(args: SelectSubset<T, ClienteProdutoCreateArgs<ExtArgs>>): Prisma__ClienteProdutoClient<$Result.GetResult<Prisma.$ClienteProdutoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClienteProdutos.
     * @param {ClienteProdutoCreateManyArgs} args - Arguments to create many ClienteProdutos.
     * @example
     * // Create many ClienteProdutos
     * const clienteProduto = await prisma.clienteProduto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteProdutoCreateManyArgs>(args?: SelectSubset<T, ClienteProdutoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClienteProduto.
     * @param {ClienteProdutoDeleteArgs} args - Arguments to delete one ClienteProduto.
     * @example
     * // Delete one ClienteProduto
     * const ClienteProduto = await prisma.clienteProduto.delete({
     *   where: {
     *     // ... filter to delete one ClienteProduto
     *   }
     * })
     * 
     */
    delete<T extends ClienteProdutoDeleteArgs>(args: SelectSubset<T, ClienteProdutoDeleteArgs<ExtArgs>>): Prisma__ClienteProdutoClient<$Result.GetResult<Prisma.$ClienteProdutoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClienteProduto.
     * @param {ClienteProdutoUpdateArgs} args - Arguments to update one ClienteProduto.
     * @example
     * // Update one ClienteProduto
     * const clienteProduto = await prisma.clienteProduto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteProdutoUpdateArgs>(args: SelectSubset<T, ClienteProdutoUpdateArgs<ExtArgs>>): Prisma__ClienteProdutoClient<$Result.GetResult<Prisma.$ClienteProdutoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClienteProdutos.
     * @param {ClienteProdutoDeleteManyArgs} args - Arguments to filter ClienteProdutos to delete.
     * @example
     * // Delete a few ClienteProdutos
     * const { count } = await prisma.clienteProduto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteProdutoDeleteManyArgs>(args?: SelectSubset<T, ClienteProdutoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClienteProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteProdutoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClienteProdutos
     * const clienteProduto = await prisma.clienteProduto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteProdutoUpdateManyArgs>(args: SelectSubset<T, ClienteProdutoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClienteProduto.
     * @param {ClienteProdutoUpsertArgs} args - Arguments to update or create a ClienteProduto.
     * @example
     * // Update or create a ClienteProduto
     * const clienteProduto = await prisma.clienteProduto.upsert({
     *   create: {
     *     // ... data to create a ClienteProduto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClienteProduto we want to update
     *   }
     * })
     */
    upsert<T extends ClienteProdutoUpsertArgs>(args: SelectSubset<T, ClienteProdutoUpsertArgs<ExtArgs>>): Prisma__ClienteProdutoClient<$Result.GetResult<Prisma.$ClienteProdutoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClienteProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteProdutoCountArgs} args - Arguments to filter ClienteProdutos to count.
     * @example
     * // Count the number of ClienteProdutos
     * const count = await prisma.clienteProduto.count({
     *   where: {
     *     // ... the filter for the ClienteProdutos we want to count
     *   }
     * })
    **/
    count<T extends ClienteProdutoCountArgs>(
      args?: Subset<T, ClienteProdutoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClienteProduto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteProdutoAggregateArgs>(args: Subset<T, ClienteProdutoAggregateArgs>): Prisma.PrismaPromise<GetClienteProdutoAggregateType<T>>

    /**
     * Group by ClienteProduto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteProdutoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteProdutoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteProdutoGroupByArgs['orderBy'] }
        : { orderBy?: ClienteProdutoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteProdutoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteProdutoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClienteProduto model
   */
  readonly fields: ClienteProdutoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClienteProduto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteProdutoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    produto<T extends ProdutoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProdutoDefaultArgs<ExtArgs>>): Prisma__ProdutoClient<$Result.GetResult<Prisma.$ProdutoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClienteProduto model
   */
  interface ClienteProdutoFieldRefs {
    readonly id: FieldRef<"ClienteProduto", 'Int'>
    readonly clienteId: FieldRef<"ClienteProduto", 'Int'>
    readonly produtoId: FieldRef<"ClienteProduto", 'String'>
    readonly quantidade: FieldRef<"ClienteProduto", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ClienteProduto findUnique
   */
  export type ClienteProdutoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteProduto
     */
    select?: ClienteProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteProduto
     */
    omit?: ClienteProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteProdutoInclude<ExtArgs> | null
    /**
     * Filter, which ClienteProduto to fetch.
     */
    where: ClienteProdutoWhereUniqueInput
  }

  /**
   * ClienteProduto findUniqueOrThrow
   */
  export type ClienteProdutoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteProduto
     */
    select?: ClienteProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteProduto
     */
    omit?: ClienteProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteProdutoInclude<ExtArgs> | null
    /**
     * Filter, which ClienteProduto to fetch.
     */
    where: ClienteProdutoWhereUniqueInput
  }

  /**
   * ClienteProduto findFirst
   */
  export type ClienteProdutoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteProduto
     */
    select?: ClienteProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteProduto
     */
    omit?: ClienteProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteProdutoInclude<ExtArgs> | null
    /**
     * Filter, which ClienteProduto to fetch.
     */
    where?: ClienteProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteProdutos to fetch.
     */
    orderBy?: ClienteProdutoOrderByWithRelationInput | ClienteProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteProdutos.
     */
    cursor?: ClienteProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteProdutos.
     */
    distinct?: ClienteProdutoScalarFieldEnum | ClienteProdutoScalarFieldEnum[]
  }

  /**
   * ClienteProduto findFirstOrThrow
   */
  export type ClienteProdutoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteProduto
     */
    select?: ClienteProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteProduto
     */
    omit?: ClienteProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteProdutoInclude<ExtArgs> | null
    /**
     * Filter, which ClienteProduto to fetch.
     */
    where?: ClienteProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteProdutos to fetch.
     */
    orderBy?: ClienteProdutoOrderByWithRelationInput | ClienteProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteProdutos.
     */
    cursor?: ClienteProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteProdutos.
     */
    distinct?: ClienteProdutoScalarFieldEnum | ClienteProdutoScalarFieldEnum[]
  }

  /**
   * ClienteProduto findMany
   */
  export type ClienteProdutoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteProduto
     */
    select?: ClienteProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteProduto
     */
    omit?: ClienteProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteProdutoInclude<ExtArgs> | null
    /**
     * Filter, which ClienteProdutos to fetch.
     */
    where?: ClienteProdutoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteProdutos to fetch.
     */
    orderBy?: ClienteProdutoOrderByWithRelationInput | ClienteProdutoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClienteProdutos.
     */
    cursor?: ClienteProdutoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteProdutos.
     */
    skip?: number
    distinct?: ClienteProdutoScalarFieldEnum | ClienteProdutoScalarFieldEnum[]
  }

  /**
   * ClienteProduto create
   */
  export type ClienteProdutoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteProduto
     */
    select?: ClienteProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteProduto
     */
    omit?: ClienteProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteProdutoInclude<ExtArgs> | null
    /**
     * The data needed to create a ClienteProduto.
     */
    data: XOR<ClienteProdutoCreateInput, ClienteProdutoUncheckedCreateInput>
  }

  /**
   * ClienteProduto createMany
   */
  export type ClienteProdutoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClienteProdutos.
     */
    data: ClienteProdutoCreateManyInput | ClienteProdutoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClienteProduto update
   */
  export type ClienteProdutoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteProduto
     */
    select?: ClienteProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteProduto
     */
    omit?: ClienteProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteProdutoInclude<ExtArgs> | null
    /**
     * The data needed to update a ClienteProduto.
     */
    data: XOR<ClienteProdutoUpdateInput, ClienteProdutoUncheckedUpdateInput>
    /**
     * Choose, which ClienteProduto to update.
     */
    where: ClienteProdutoWhereUniqueInput
  }

  /**
   * ClienteProduto updateMany
   */
  export type ClienteProdutoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClienteProdutos.
     */
    data: XOR<ClienteProdutoUpdateManyMutationInput, ClienteProdutoUncheckedUpdateManyInput>
    /**
     * Filter which ClienteProdutos to update
     */
    where?: ClienteProdutoWhereInput
    /**
     * Limit how many ClienteProdutos to update.
     */
    limit?: number
  }

  /**
   * ClienteProduto upsert
   */
  export type ClienteProdutoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteProduto
     */
    select?: ClienteProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteProduto
     */
    omit?: ClienteProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteProdutoInclude<ExtArgs> | null
    /**
     * The filter to search for the ClienteProduto to update in case it exists.
     */
    where: ClienteProdutoWhereUniqueInput
    /**
     * In case the ClienteProduto found by the `where` argument doesn't exist, create a new ClienteProduto with this data.
     */
    create: XOR<ClienteProdutoCreateInput, ClienteProdutoUncheckedCreateInput>
    /**
     * In case the ClienteProduto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteProdutoUpdateInput, ClienteProdutoUncheckedUpdateInput>
  }

  /**
   * ClienteProduto delete
   */
  export type ClienteProdutoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteProduto
     */
    select?: ClienteProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteProduto
     */
    omit?: ClienteProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteProdutoInclude<ExtArgs> | null
    /**
     * Filter which ClienteProduto to delete.
     */
    where: ClienteProdutoWhereUniqueInput
  }

  /**
   * ClienteProduto deleteMany
   */
  export type ClienteProdutoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteProdutos to delete
     */
    where?: ClienteProdutoWhereInput
    /**
     * Limit how many ClienteProdutos to delete.
     */
    limit?: number
  }

  /**
   * ClienteProduto without action
   */
  export type ClienteProdutoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteProduto
     */
    select?: ClienteProdutoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteProduto
     */
    omit?: ClienteProdutoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteProdutoInclude<ExtArgs> | null
  }


  /**
   * Model ClienteServico
   */

  export type AggregateClienteServico = {
    _count: ClienteServicoCountAggregateOutputType | null
    _avg: ClienteServicoAvgAggregateOutputType | null
    _sum: ClienteServicoSumAggregateOutputType | null
    _min: ClienteServicoMinAggregateOutputType | null
    _max: ClienteServicoMaxAggregateOutputType | null
  }

  export type ClienteServicoAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
    quantidade: number | null
  }

  export type ClienteServicoSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
    quantidade: number | null
  }

  export type ClienteServicoMinAggregateOutputType = {
    id: number | null
    clienteId: number | null
    servicoId: string | null
    quantidade: number | null
  }

  export type ClienteServicoMaxAggregateOutputType = {
    id: number | null
    clienteId: number | null
    servicoId: string | null
    quantidade: number | null
  }

  export type ClienteServicoCountAggregateOutputType = {
    id: number
    clienteId: number
    servicoId: number
    quantidade: number
    _all: number
  }


  export type ClienteServicoAvgAggregateInputType = {
    id?: true
    clienteId?: true
    quantidade?: true
  }

  export type ClienteServicoSumAggregateInputType = {
    id?: true
    clienteId?: true
    quantidade?: true
  }

  export type ClienteServicoMinAggregateInputType = {
    id?: true
    clienteId?: true
    servicoId?: true
    quantidade?: true
  }

  export type ClienteServicoMaxAggregateInputType = {
    id?: true
    clienteId?: true
    servicoId?: true
    quantidade?: true
  }

  export type ClienteServicoCountAggregateInputType = {
    id?: true
    clienteId?: true
    servicoId?: true
    quantidade?: true
    _all?: true
  }

  export type ClienteServicoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteServico to aggregate.
     */
    where?: ClienteServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteServicos to fetch.
     */
    orderBy?: ClienteServicoOrderByWithRelationInput | ClienteServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteServicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteServicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClienteServicos
    **/
    _count?: true | ClienteServicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteServicoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteServicoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteServicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteServicoMaxAggregateInputType
  }

  export type GetClienteServicoAggregateType<T extends ClienteServicoAggregateArgs> = {
        [P in keyof T & keyof AggregateClienteServico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClienteServico[P]>
      : GetScalarType<T[P], AggregateClienteServico[P]>
  }




  export type ClienteServicoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteServicoWhereInput
    orderBy?: ClienteServicoOrderByWithAggregationInput | ClienteServicoOrderByWithAggregationInput[]
    by: ClienteServicoScalarFieldEnum[] | ClienteServicoScalarFieldEnum
    having?: ClienteServicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteServicoCountAggregateInputType | true
    _avg?: ClienteServicoAvgAggregateInputType
    _sum?: ClienteServicoSumAggregateInputType
    _min?: ClienteServicoMinAggregateInputType
    _max?: ClienteServicoMaxAggregateInputType
  }

  export type ClienteServicoGroupByOutputType = {
    id: number
    clienteId: number
    servicoId: string
    quantidade: number
    _count: ClienteServicoCountAggregateOutputType | null
    _avg: ClienteServicoAvgAggregateOutputType | null
    _sum: ClienteServicoSumAggregateOutputType | null
    _min: ClienteServicoMinAggregateOutputType | null
    _max: ClienteServicoMaxAggregateOutputType | null
  }

  type GetClienteServicoGroupByPayload<T extends ClienteServicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteServicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteServicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteServicoGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteServicoGroupByOutputType[P]>
        }
      >
    >


  export type ClienteServicoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clienteId?: boolean
    servicoId?: boolean
    quantidade?: boolean
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    servico?: boolean | ServicoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clienteServico"]>



  export type ClienteServicoSelectScalar = {
    id?: boolean
    clienteId?: boolean
    servicoId?: boolean
    quantidade?: boolean
  }

  export type ClienteServicoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clienteId" | "servicoId" | "quantidade", ExtArgs["result"]["clienteServico"]>
  export type ClienteServicoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    servico?: boolean | ServicoDefaultArgs<ExtArgs>
  }

  export type $ClienteServicoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClienteServico"
    objects: {
      cliente: Prisma.$ClientePayload<ExtArgs>
      servico: Prisma.$ServicoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clienteId: number
      servicoId: string
      quantidade: number
    }, ExtArgs["result"]["clienteServico"]>
    composites: {}
  }

  type ClienteServicoGetPayload<S extends boolean | null | undefined | ClienteServicoDefaultArgs> = $Result.GetResult<Prisma.$ClienteServicoPayload, S>

  type ClienteServicoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClienteServicoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClienteServicoCountAggregateInputType | true
    }

  export interface ClienteServicoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClienteServico'], meta: { name: 'ClienteServico' } }
    /**
     * Find zero or one ClienteServico that matches the filter.
     * @param {ClienteServicoFindUniqueArgs} args - Arguments to find a ClienteServico
     * @example
     * // Get one ClienteServico
     * const clienteServico = await prisma.clienteServico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteServicoFindUniqueArgs>(args: SelectSubset<T, ClienteServicoFindUniqueArgs<ExtArgs>>): Prisma__ClienteServicoClient<$Result.GetResult<Prisma.$ClienteServicoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClienteServico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClienteServicoFindUniqueOrThrowArgs} args - Arguments to find a ClienteServico
     * @example
     * // Get one ClienteServico
     * const clienteServico = await prisma.clienteServico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteServicoFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteServicoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteServicoClient<$Result.GetResult<Prisma.$ClienteServicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClienteServico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicoFindFirstArgs} args - Arguments to find a ClienteServico
     * @example
     * // Get one ClienteServico
     * const clienteServico = await prisma.clienteServico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteServicoFindFirstArgs>(args?: SelectSubset<T, ClienteServicoFindFirstArgs<ExtArgs>>): Prisma__ClienteServicoClient<$Result.GetResult<Prisma.$ClienteServicoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClienteServico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicoFindFirstOrThrowArgs} args - Arguments to find a ClienteServico
     * @example
     * // Get one ClienteServico
     * const clienteServico = await prisma.clienteServico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteServicoFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteServicoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteServicoClient<$Result.GetResult<Prisma.$ClienteServicoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClienteServicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClienteServicos
     * const clienteServicos = await prisma.clienteServico.findMany()
     * 
     * // Get first 10 ClienteServicos
     * const clienteServicos = await prisma.clienteServico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteServicoWithIdOnly = await prisma.clienteServico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteServicoFindManyArgs>(args?: SelectSubset<T, ClienteServicoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClienteServicoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClienteServico.
     * @param {ClienteServicoCreateArgs} args - Arguments to create a ClienteServico.
     * @example
     * // Create one ClienteServico
     * const ClienteServico = await prisma.clienteServico.create({
     *   data: {
     *     // ... data to create a ClienteServico
     *   }
     * })
     * 
     */
    create<T extends ClienteServicoCreateArgs>(args: SelectSubset<T, ClienteServicoCreateArgs<ExtArgs>>): Prisma__ClienteServicoClient<$Result.GetResult<Prisma.$ClienteServicoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClienteServicos.
     * @param {ClienteServicoCreateManyArgs} args - Arguments to create many ClienteServicos.
     * @example
     * // Create many ClienteServicos
     * const clienteServico = await prisma.clienteServico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteServicoCreateManyArgs>(args?: SelectSubset<T, ClienteServicoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClienteServico.
     * @param {ClienteServicoDeleteArgs} args - Arguments to delete one ClienteServico.
     * @example
     * // Delete one ClienteServico
     * const ClienteServico = await prisma.clienteServico.delete({
     *   where: {
     *     // ... filter to delete one ClienteServico
     *   }
     * })
     * 
     */
    delete<T extends ClienteServicoDeleteArgs>(args: SelectSubset<T, ClienteServicoDeleteArgs<ExtArgs>>): Prisma__ClienteServicoClient<$Result.GetResult<Prisma.$ClienteServicoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClienteServico.
     * @param {ClienteServicoUpdateArgs} args - Arguments to update one ClienteServico.
     * @example
     * // Update one ClienteServico
     * const clienteServico = await prisma.clienteServico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteServicoUpdateArgs>(args: SelectSubset<T, ClienteServicoUpdateArgs<ExtArgs>>): Prisma__ClienteServicoClient<$Result.GetResult<Prisma.$ClienteServicoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClienteServicos.
     * @param {ClienteServicoDeleteManyArgs} args - Arguments to filter ClienteServicos to delete.
     * @example
     * // Delete a few ClienteServicos
     * const { count } = await prisma.clienteServico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteServicoDeleteManyArgs>(args?: SelectSubset<T, ClienteServicoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClienteServicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClienteServicos
     * const clienteServico = await prisma.clienteServico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteServicoUpdateManyArgs>(args: SelectSubset<T, ClienteServicoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClienteServico.
     * @param {ClienteServicoUpsertArgs} args - Arguments to update or create a ClienteServico.
     * @example
     * // Update or create a ClienteServico
     * const clienteServico = await prisma.clienteServico.upsert({
     *   create: {
     *     // ... data to create a ClienteServico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClienteServico we want to update
     *   }
     * })
     */
    upsert<T extends ClienteServicoUpsertArgs>(args: SelectSubset<T, ClienteServicoUpsertArgs<ExtArgs>>): Prisma__ClienteServicoClient<$Result.GetResult<Prisma.$ClienteServicoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClienteServicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicoCountArgs} args - Arguments to filter ClienteServicos to count.
     * @example
     * // Count the number of ClienteServicos
     * const count = await prisma.clienteServico.count({
     *   where: {
     *     // ... the filter for the ClienteServicos we want to count
     *   }
     * })
    **/
    count<T extends ClienteServicoCountArgs>(
      args?: Subset<T, ClienteServicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteServicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClienteServico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteServicoAggregateArgs>(args: Subset<T, ClienteServicoAggregateArgs>): Prisma.PrismaPromise<GetClienteServicoAggregateType<T>>

    /**
     * Group by ClienteServico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteServicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteServicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteServicoGroupByArgs['orderBy'] }
        : { orderBy?: ClienteServicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteServicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteServicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClienteServico model
   */
  readonly fields: ClienteServicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClienteServico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteServicoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    servico<T extends ServicoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServicoDefaultArgs<ExtArgs>>): Prisma__ServicoClient<$Result.GetResult<Prisma.$ServicoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClienteServico model
   */
  interface ClienteServicoFieldRefs {
    readonly id: FieldRef<"ClienteServico", 'Int'>
    readonly clienteId: FieldRef<"ClienteServico", 'Int'>
    readonly servicoId: FieldRef<"ClienteServico", 'String'>
    readonly quantidade: FieldRef<"ClienteServico", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ClienteServico findUnique
   */
  export type ClienteServicoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServico
     */
    select?: ClienteServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteServico
     */
    omit?: ClienteServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicoInclude<ExtArgs> | null
    /**
     * Filter, which ClienteServico to fetch.
     */
    where: ClienteServicoWhereUniqueInput
  }

  /**
   * ClienteServico findUniqueOrThrow
   */
  export type ClienteServicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServico
     */
    select?: ClienteServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteServico
     */
    omit?: ClienteServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicoInclude<ExtArgs> | null
    /**
     * Filter, which ClienteServico to fetch.
     */
    where: ClienteServicoWhereUniqueInput
  }

  /**
   * ClienteServico findFirst
   */
  export type ClienteServicoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServico
     */
    select?: ClienteServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteServico
     */
    omit?: ClienteServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicoInclude<ExtArgs> | null
    /**
     * Filter, which ClienteServico to fetch.
     */
    where?: ClienteServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteServicos to fetch.
     */
    orderBy?: ClienteServicoOrderByWithRelationInput | ClienteServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteServicos.
     */
    cursor?: ClienteServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteServicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteServicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteServicos.
     */
    distinct?: ClienteServicoScalarFieldEnum | ClienteServicoScalarFieldEnum[]
  }

  /**
   * ClienteServico findFirstOrThrow
   */
  export type ClienteServicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServico
     */
    select?: ClienteServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteServico
     */
    omit?: ClienteServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicoInclude<ExtArgs> | null
    /**
     * Filter, which ClienteServico to fetch.
     */
    where?: ClienteServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteServicos to fetch.
     */
    orderBy?: ClienteServicoOrderByWithRelationInput | ClienteServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClienteServicos.
     */
    cursor?: ClienteServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteServicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteServicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClienteServicos.
     */
    distinct?: ClienteServicoScalarFieldEnum | ClienteServicoScalarFieldEnum[]
  }

  /**
   * ClienteServico findMany
   */
  export type ClienteServicoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServico
     */
    select?: ClienteServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteServico
     */
    omit?: ClienteServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicoInclude<ExtArgs> | null
    /**
     * Filter, which ClienteServicos to fetch.
     */
    where?: ClienteServicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClienteServicos to fetch.
     */
    orderBy?: ClienteServicoOrderByWithRelationInput | ClienteServicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClienteServicos.
     */
    cursor?: ClienteServicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClienteServicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClienteServicos.
     */
    skip?: number
    distinct?: ClienteServicoScalarFieldEnum | ClienteServicoScalarFieldEnum[]
  }

  /**
   * ClienteServico create
   */
  export type ClienteServicoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServico
     */
    select?: ClienteServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteServico
     */
    omit?: ClienteServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicoInclude<ExtArgs> | null
    /**
     * The data needed to create a ClienteServico.
     */
    data: XOR<ClienteServicoCreateInput, ClienteServicoUncheckedCreateInput>
  }

  /**
   * ClienteServico createMany
   */
  export type ClienteServicoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClienteServicos.
     */
    data: ClienteServicoCreateManyInput | ClienteServicoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClienteServico update
   */
  export type ClienteServicoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServico
     */
    select?: ClienteServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteServico
     */
    omit?: ClienteServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicoInclude<ExtArgs> | null
    /**
     * The data needed to update a ClienteServico.
     */
    data: XOR<ClienteServicoUpdateInput, ClienteServicoUncheckedUpdateInput>
    /**
     * Choose, which ClienteServico to update.
     */
    where: ClienteServicoWhereUniqueInput
  }

  /**
   * ClienteServico updateMany
   */
  export type ClienteServicoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClienteServicos.
     */
    data: XOR<ClienteServicoUpdateManyMutationInput, ClienteServicoUncheckedUpdateManyInput>
    /**
     * Filter which ClienteServicos to update
     */
    where?: ClienteServicoWhereInput
    /**
     * Limit how many ClienteServicos to update.
     */
    limit?: number
  }

  /**
   * ClienteServico upsert
   */
  export type ClienteServicoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServico
     */
    select?: ClienteServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteServico
     */
    omit?: ClienteServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicoInclude<ExtArgs> | null
    /**
     * The filter to search for the ClienteServico to update in case it exists.
     */
    where: ClienteServicoWhereUniqueInput
    /**
     * In case the ClienteServico found by the `where` argument doesn't exist, create a new ClienteServico with this data.
     */
    create: XOR<ClienteServicoCreateInput, ClienteServicoUncheckedCreateInput>
    /**
     * In case the ClienteServico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteServicoUpdateInput, ClienteServicoUncheckedUpdateInput>
  }

  /**
   * ClienteServico delete
   */
  export type ClienteServicoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServico
     */
    select?: ClienteServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteServico
     */
    omit?: ClienteServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicoInclude<ExtArgs> | null
    /**
     * Filter which ClienteServico to delete.
     */
    where: ClienteServicoWhereUniqueInput
  }

  /**
   * ClienteServico deleteMany
   */
  export type ClienteServicoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClienteServicos to delete
     */
    where?: ClienteServicoWhereInput
    /**
     * Limit how many ClienteServicos to delete.
     */
    limit?: number
  }

  /**
   * ClienteServico without action
   */
  export type ClienteServicoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteServico
     */
    select?: ClienteServicoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClienteServico
     */
    omit?: ClienteServicoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteServicoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    nomeSocial: 'nomeSocial',
    genero: 'genero',
    cpf: 'cpf',
    rg: 'rg',
    telefone: 'telefone'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao',
    valor: 'valor'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const ServicoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao',
    valor: 'valor'
  };

  export type ServicoScalarFieldEnum = (typeof ServicoScalarFieldEnum)[keyof typeof ServicoScalarFieldEnum]


  export const ClienteProdutoScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    produtoId: 'produtoId',
    quantidade: 'quantidade'
  };

  export type ClienteProdutoScalarFieldEnum = (typeof ClienteProdutoScalarFieldEnum)[keyof typeof ClienteProdutoScalarFieldEnum]


  export const ClienteServicoScalarFieldEnum: {
    id: 'id',
    clienteId: 'clienteId',
    servicoId: 'servicoId',
    quantidade: 'quantidade'
  };

  export type ClienteServicoScalarFieldEnum = (typeof ClienteServicoScalarFieldEnum)[keyof typeof ClienteServicoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const ClienteOrderByRelevanceFieldEnum: {
    nome: 'nome',
    nomeSocial: 'nomeSocial',
    genero: 'genero',
    cpf: 'cpf',
    rg: 'rg',
    telefone: 'telefone'
  };

  export type ClienteOrderByRelevanceFieldEnum = (typeof ClienteOrderByRelevanceFieldEnum)[keyof typeof ClienteOrderByRelevanceFieldEnum]


  export const ProdutoOrderByRelevanceFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao'
  };

  export type ProdutoOrderByRelevanceFieldEnum = (typeof ProdutoOrderByRelevanceFieldEnum)[keyof typeof ProdutoOrderByRelevanceFieldEnum]


  export const ServicoOrderByRelevanceFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao'
  };

  export type ServicoOrderByRelevanceFieldEnum = (typeof ServicoOrderByRelevanceFieldEnum)[keyof typeof ServicoOrderByRelevanceFieldEnum]


  export const ClienteProdutoOrderByRelevanceFieldEnum: {
    produtoId: 'produtoId'
  };

  export type ClienteProdutoOrderByRelevanceFieldEnum = (typeof ClienteProdutoOrderByRelevanceFieldEnum)[keyof typeof ClienteProdutoOrderByRelevanceFieldEnum]


  export const ClienteServicoOrderByRelevanceFieldEnum: {
    servicoId: 'servicoId'
  };

  export type ClienteServicoOrderByRelevanceFieldEnum = (typeof ClienteServicoOrderByRelevanceFieldEnum)[keyof typeof ClienteServicoOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    id?: IntFilter<"Cliente"> | number
    nome?: StringFilter<"Cliente"> | string
    nomeSocial?: StringFilter<"Cliente"> | string
    genero?: StringFilter<"Cliente"> | string
    cpf?: StringFilter<"Cliente"> | string
    rg?: StringFilter<"Cliente"> | string
    telefone?: StringFilter<"Cliente"> | string
    produtos?: ClienteProdutoListRelationFilter
    servicos?: ClienteServicoListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    nomeSocial?: SortOrder
    genero?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    telefone?: SortOrder
    produtos?: ClienteProdutoOrderByRelationAggregateInput
    servicos?: ClienteServicoOrderByRelationAggregateInput
    _relevance?: ClienteOrderByRelevanceInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cpf?: string
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    nome?: StringFilter<"Cliente"> | string
    nomeSocial?: StringFilter<"Cliente"> | string
    genero?: StringFilter<"Cliente"> | string
    rg?: StringFilter<"Cliente"> | string
    telefone?: StringFilter<"Cliente"> | string
    produtos?: ClienteProdutoListRelationFilter
    servicos?: ClienteServicoListRelationFilter
  }, "id" | "cpf">

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    nomeSocial?: SortOrder
    genero?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    telefone?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cliente"> | number
    nome?: StringWithAggregatesFilter<"Cliente"> | string
    nomeSocial?: StringWithAggregatesFilter<"Cliente"> | string
    genero?: StringWithAggregatesFilter<"Cliente"> | string
    cpf?: StringWithAggregatesFilter<"Cliente"> | string
    rg?: StringWithAggregatesFilter<"Cliente"> | string
    telefone?: StringWithAggregatesFilter<"Cliente"> | string
  }

  export type ProdutoWhereInput = {
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    id?: StringFilter<"Produto"> | string
    nome?: StringFilter<"Produto"> | string
    descricao?: StringFilter<"Produto"> | string
    valor?: FloatFilter<"Produto"> | number
    clientes?: ClienteProdutoListRelationFilter
  }

  export type ProdutoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    clientes?: ClienteProdutoOrderByRelationAggregateInput
    _relevance?: ProdutoOrderByRelevanceInput
  }

  export type ProdutoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProdutoWhereInput | ProdutoWhereInput[]
    OR?: ProdutoWhereInput[]
    NOT?: ProdutoWhereInput | ProdutoWhereInput[]
    nome?: StringFilter<"Produto"> | string
    descricao?: StringFilter<"Produto"> | string
    valor?: FloatFilter<"Produto"> | number
    clientes?: ClienteProdutoListRelationFilter
  }, "id">

  export type ProdutoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    _count?: ProdutoCountOrderByAggregateInput
    _avg?: ProdutoAvgOrderByAggregateInput
    _max?: ProdutoMaxOrderByAggregateInput
    _min?: ProdutoMinOrderByAggregateInput
    _sum?: ProdutoSumOrderByAggregateInput
  }

  export type ProdutoScalarWhereWithAggregatesInput = {
    AND?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    OR?: ProdutoScalarWhereWithAggregatesInput[]
    NOT?: ProdutoScalarWhereWithAggregatesInput | ProdutoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Produto"> | string
    nome?: StringWithAggregatesFilter<"Produto"> | string
    descricao?: StringWithAggregatesFilter<"Produto"> | string
    valor?: FloatWithAggregatesFilter<"Produto"> | number
  }

  export type ServicoWhereInput = {
    AND?: ServicoWhereInput | ServicoWhereInput[]
    OR?: ServicoWhereInput[]
    NOT?: ServicoWhereInput | ServicoWhereInput[]
    id?: StringFilter<"Servico"> | string
    nome?: StringFilter<"Servico"> | string
    descricao?: StringFilter<"Servico"> | string
    valor?: FloatFilter<"Servico"> | number
    clientes?: ClienteServicoListRelationFilter
  }

  export type ServicoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    clientes?: ClienteServicoOrderByRelationAggregateInput
    _relevance?: ServicoOrderByRelevanceInput
  }

  export type ServicoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServicoWhereInput | ServicoWhereInput[]
    OR?: ServicoWhereInput[]
    NOT?: ServicoWhereInput | ServicoWhereInput[]
    nome?: StringFilter<"Servico"> | string
    descricao?: StringFilter<"Servico"> | string
    valor?: FloatFilter<"Servico"> | number
    clientes?: ClienteServicoListRelationFilter
  }, "id">

  export type ServicoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    _count?: ServicoCountOrderByAggregateInput
    _avg?: ServicoAvgOrderByAggregateInput
    _max?: ServicoMaxOrderByAggregateInput
    _min?: ServicoMinOrderByAggregateInput
    _sum?: ServicoSumOrderByAggregateInput
  }

  export type ServicoScalarWhereWithAggregatesInput = {
    AND?: ServicoScalarWhereWithAggregatesInput | ServicoScalarWhereWithAggregatesInput[]
    OR?: ServicoScalarWhereWithAggregatesInput[]
    NOT?: ServicoScalarWhereWithAggregatesInput | ServicoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Servico"> | string
    nome?: StringWithAggregatesFilter<"Servico"> | string
    descricao?: StringWithAggregatesFilter<"Servico"> | string
    valor?: FloatWithAggregatesFilter<"Servico"> | number
  }

  export type ClienteProdutoWhereInput = {
    AND?: ClienteProdutoWhereInput | ClienteProdutoWhereInput[]
    OR?: ClienteProdutoWhereInput[]
    NOT?: ClienteProdutoWhereInput | ClienteProdutoWhereInput[]
    id?: IntFilter<"ClienteProduto"> | number
    clienteId?: IntFilter<"ClienteProduto"> | number
    produtoId?: StringFilter<"ClienteProduto"> | string
    quantidade?: IntFilter<"ClienteProduto"> | number
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    produto?: XOR<ProdutoScalarRelationFilter, ProdutoWhereInput>
  }

  export type ClienteProdutoOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    produtoId?: SortOrder
    quantidade?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
    produto?: ProdutoOrderByWithRelationInput
    _relevance?: ClienteProdutoOrderByRelevanceInput
  }

  export type ClienteProdutoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClienteProdutoWhereInput | ClienteProdutoWhereInput[]
    OR?: ClienteProdutoWhereInput[]
    NOT?: ClienteProdutoWhereInput | ClienteProdutoWhereInput[]
    clienteId?: IntFilter<"ClienteProduto"> | number
    produtoId?: StringFilter<"ClienteProduto"> | string
    quantidade?: IntFilter<"ClienteProduto"> | number
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    produto?: XOR<ProdutoScalarRelationFilter, ProdutoWhereInput>
  }, "id">

  export type ClienteProdutoOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    produtoId?: SortOrder
    quantidade?: SortOrder
    _count?: ClienteProdutoCountOrderByAggregateInput
    _avg?: ClienteProdutoAvgOrderByAggregateInput
    _max?: ClienteProdutoMaxOrderByAggregateInput
    _min?: ClienteProdutoMinOrderByAggregateInput
    _sum?: ClienteProdutoSumOrderByAggregateInput
  }

  export type ClienteProdutoScalarWhereWithAggregatesInput = {
    AND?: ClienteProdutoScalarWhereWithAggregatesInput | ClienteProdutoScalarWhereWithAggregatesInput[]
    OR?: ClienteProdutoScalarWhereWithAggregatesInput[]
    NOT?: ClienteProdutoScalarWhereWithAggregatesInput | ClienteProdutoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClienteProduto"> | number
    clienteId?: IntWithAggregatesFilter<"ClienteProduto"> | number
    produtoId?: StringWithAggregatesFilter<"ClienteProduto"> | string
    quantidade?: IntWithAggregatesFilter<"ClienteProduto"> | number
  }

  export type ClienteServicoWhereInput = {
    AND?: ClienteServicoWhereInput | ClienteServicoWhereInput[]
    OR?: ClienteServicoWhereInput[]
    NOT?: ClienteServicoWhereInput | ClienteServicoWhereInput[]
    id?: IntFilter<"ClienteServico"> | number
    clienteId?: IntFilter<"ClienteServico"> | number
    servicoId?: StringFilter<"ClienteServico"> | string
    quantidade?: IntFilter<"ClienteServico"> | number
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    servico?: XOR<ServicoScalarRelationFilter, ServicoWhereInput>
  }

  export type ClienteServicoOrderByWithRelationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    servicoId?: SortOrder
    quantidade?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
    servico?: ServicoOrderByWithRelationInput
    _relevance?: ClienteServicoOrderByRelevanceInput
  }

  export type ClienteServicoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClienteServicoWhereInput | ClienteServicoWhereInput[]
    OR?: ClienteServicoWhereInput[]
    NOT?: ClienteServicoWhereInput | ClienteServicoWhereInput[]
    clienteId?: IntFilter<"ClienteServico"> | number
    servicoId?: StringFilter<"ClienteServico"> | string
    quantidade?: IntFilter<"ClienteServico"> | number
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    servico?: XOR<ServicoScalarRelationFilter, ServicoWhereInput>
  }, "id">

  export type ClienteServicoOrderByWithAggregationInput = {
    id?: SortOrder
    clienteId?: SortOrder
    servicoId?: SortOrder
    quantidade?: SortOrder
    _count?: ClienteServicoCountOrderByAggregateInput
    _avg?: ClienteServicoAvgOrderByAggregateInput
    _max?: ClienteServicoMaxOrderByAggregateInput
    _min?: ClienteServicoMinOrderByAggregateInput
    _sum?: ClienteServicoSumOrderByAggregateInput
  }

  export type ClienteServicoScalarWhereWithAggregatesInput = {
    AND?: ClienteServicoScalarWhereWithAggregatesInput | ClienteServicoScalarWhereWithAggregatesInput[]
    OR?: ClienteServicoScalarWhereWithAggregatesInput[]
    NOT?: ClienteServicoScalarWhereWithAggregatesInput | ClienteServicoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClienteServico"> | number
    clienteId?: IntWithAggregatesFilter<"ClienteServico"> | number
    servicoId?: StringWithAggregatesFilter<"ClienteServico"> | string
    quantidade?: IntWithAggregatesFilter<"ClienteServico"> | number
  }

  export type ClienteCreateInput = {
    nome: string
    nomeSocial: string
    genero: string
    cpf: string
    rg: string
    telefone: string
    produtos?: ClienteProdutoCreateNestedManyWithoutClienteInput
    servicos?: ClienteServicoCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    id?: number
    nome: string
    nomeSocial: string
    genero: string
    cpf: string
    rg: string
    telefone: string
    produtos?: ClienteProdutoUncheckedCreateNestedManyWithoutClienteInput
    servicos?: ClienteServicoUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeSocial?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    produtos?: ClienteProdutoUpdateManyWithoutClienteNestedInput
    servicos?: ClienteServicoUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeSocial?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    produtos?: ClienteProdutoUncheckedUpdateManyWithoutClienteNestedInput
    servicos?: ClienteServicoUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    id?: number
    nome: string
    nomeSocial: string
    genero: string
    cpf: string
    rg: string
    telefone: string
  }

  export type ClienteUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeSocial?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeSocial?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutoCreateInput = {
    id: string
    nome: string
    descricao: string
    valor: number
    clientes?: ClienteProdutoCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUncheckedCreateInput = {
    id: string
    nome: string
    descricao: string
    valor: number
    clientes?: ClienteProdutoUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type ProdutoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    clientes?: ClienteProdutoUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    clientes?: ClienteProdutoUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type ProdutoCreateManyInput = {
    id: string
    nome: string
    descricao: string
    valor: number
  }

  export type ProdutoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type ProdutoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type ServicoCreateInput = {
    id: string
    nome: string
    descricao: string
    valor: number
    clientes?: ClienteServicoCreateNestedManyWithoutServicoInput
  }

  export type ServicoUncheckedCreateInput = {
    id: string
    nome: string
    descricao: string
    valor: number
    clientes?: ClienteServicoUncheckedCreateNestedManyWithoutServicoInput
  }

  export type ServicoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    clientes?: ClienteServicoUpdateManyWithoutServicoNestedInput
  }

  export type ServicoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    clientes?: ClienteServicoUncheckedUpdateManyWithoutServicoNestedInput
  }

  export type ServicoCreateManyInput = {
    id: string
    nome: string
    descricao: string
    valor: number
  }

  export type ServicoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type ServicoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type ClienteProdutoCreateInput = {
    quantidade: number
    cliente: ClienteCreateNestedOneWithoutProdutosInput
    produto: ProdutoCreateNestedOneWithoutClientesInput
  }

  export type ClienteProdutoUncheckedCreateInput = {
    id?: number
    clienteId: number
    produtoId: string
    quantidade: number
  }

  export type ClienteProdutoUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    cliente?: ClienteUpdateOneRequiredWithoutProdutosNestedInput
    produto?: ProdutoUpdateOneRequiredWithoutClientesNestedInput
  }

  export type ClienteProdutoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    produtoId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteProdutoCreateManyInput = {
    id?: number
    clienteId: number
    produtoId: string
    quantidade: number
  }

  export type ClienteProdutoUpdateManyMutationInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteProdutoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    produtoId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteServicoCreateInput = {
    quantidade: number
    cliente: ClienteCreateNestedOneWithoutServicosInput
    servico: ServicoCreateNestedOneWithoutClientesInput
  }

  export type ClienteServicoUncheckedCreateInput = {
    id?: number
    clienteId: number
    servicoId: string
    quantidade: number
  }

  export type ClienteServicoUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    cliente?: ClienteUpdateOneRequiredWithoutServicosNestedInput
    servico?: ServicoUpdateOneRequiredWithoutClientesNestedInput
  }

  export type ClienteServicoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    servicoId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteServicoCreateManyInput = {
    id?: number
    clienteId: number
    servicoId: string
    quantidade: number
  }

  export type ClienteServicoUpdateManyMutationInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteServicoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    servicoId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ClienteProdutoListRelationFilter = {
    every?: ClienteProdutoWhereInput
    some?: ClienteProdutoWhereInput
    none?: ClienteProdutoWhereInput
  }

  export type ClienteServicoListRelationFilter = {
    every?: ClienteServicoWhereInput
    some?: ClienteServicoWhereInput
    none?: ClienteServicoWhereInput
  }

  export type ClienteProdutoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteServicoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteOrderByRelevanceInput = {
    fields: ClienteOrderByRelevanceFieldEnum | ClienteOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    nomeSocial?: SortOrder
    genero?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    telefone?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    nomeSocial?: SortOrder
    genero?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    telefone?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    nomeSocial?: SortOrder
    genero?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    telefone?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ProdutoOrderByRelevanceInput = {
    fields: ProdutoOrderByRelevanceFieldEnum | ProdutoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProdutoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
  }

  export type ProdutoAvgOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type ProdutoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
  }

  export type ProdutoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
  }

  export type ProdutoSumOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ServicoOrderByRelevanceInput = {
    fields: ServicoOrderByRelevanceFieldEnum | ServicoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ServicoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
  }

  export type ServicoAvgOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type ServicoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
  }

  export type ServicoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
  }

  export type ServicoSumOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type ClienteScalarRelationFilter = {
    is?: ClienteWhereInput
    isNot?: ClienteWhereInput
  }

  export type ProdutoScalarRelationFilter = {
    is?: ProdutoWhereInput
    isNot?: ProdutoWhereInput
  }

  export type ClienteProdutoOrderByRelevanceInput = {
    fields: ClienteProdutoOrderByRelevanceFieldEnum | ClienteProdutoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClienteProdutoCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    produtoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ClienteProdutoAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    quantidade?: SortOrder
  }

  export type ClienteProdutoMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    produtoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ClienteProdutoMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    produtoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ClienteProdutoSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    quantidade?: SortOrder
  }

  export type ServicoScalarRelationFilter = {
    is?: ServicoWhereInput
    isNot?: ServicoWhereInput
  }

  export type ClienteServicoOrderByRelevanceInput = {
    fields: ClienteServicoOrderByRelevanceFieldEnum | ClienteServicoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClienteServicoCountOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    servicoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ClienteServicoAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    quantidade?: SortOrder
  }

  export type ClienteServicoMaxOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    servicoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ClienteServicoMinOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    servicoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ClienteServicoSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    quantidade?: SortOrder
  }

  export type ClienteProdutoCreateNestedManyWithoutClienteInput = {
    create?: XOR<ClienteProdutoCreateWithoutClienteInput, ClienteProdutoUncheckedCreateWithoutClienteInput> | ClienteProdutoCreateWithoutClienteInput[] | ClienteProdutoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ClienteProdutoCreateOrConnectWithoutClienteInput | ClienteProdutoCreateOrConnectWithoutClienteInput[]
    createMany?: ClienteProdutoCreateManyClienteInputEnvelope
    connect?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
  }

  export type ClienteServicoCreateNestedManyWithoutClienteInput = {
    create?: XOR<ClienteServicoCreateWithoutClienteInput, ClienteServicoUncheckedCreateWithoutClienteInput> | ClienteServicoCreateWithoutClienteInput[] | ClienteServicoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ClienteServicoCreateOrConnectWithoutClienteInput | ClienteServicoCreateOrConnectWithoutClienteInput[]
    createMany?: ClienteServicoCreateManyClienteInputEnvelope
    connect?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
  }

  export type ClienteProdutoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<ClienteProdutoCreateWithoutClienteInput, ClienteProdutoUncheckedCreateWithoutClienteInput> | ClienteProdutoCreateWithoutClienteInput[] | ClienteProdutoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ClienteProdutoCreateOrConnectWithoutClienteInput | ClienteProdutoCreateOrConnectWithoutClienteInput[]
    createMany?: ClienteProdutoCreateManyClienteInputEnvelope
    connect?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
  }

  export type ClienteServicoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<ClienteServicoCreateWithoutClienteInput, ClienteServicoUncheckedCreateWithoutClienteInput> | ClienteServicoCreateWithoutClienteInput[] | ClienteServicoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ClienteServicoCreateOrConnectWithoutClienteInput | ClienteServicoCreateOrConnectWithoutClienteInput[]
    createMany?: ClienteServicoCreateManyClienteInputEnvelope
    connect?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ClienteProdutoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<ClienteProdutoCreateWithoutClienteInput, ClienteProdutoUncheckedCreateWithoutClienteInput> | ClienteProdutoCreateWithoutClienteInput[] | ClienteProdutoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ClienteProdutoCreateOrConnectWithoutClienteInput | ClienteProdutoCreateOrConnectWithoutClienteInput[]
    upsert?: ClienteProdutoUpsertWithWhereUniqueWithoutClienteInput | ClienteProdutoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: ClienteProdutoCreateManyClienteInputEnvelope
    set?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    disconnect?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    delete?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    connect?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    update?: ClienteProdutoUpdateWithWhereUniqueWithoutClienteInput | ClienteProdutoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: ClienteProdutoUpdateManyWithWhereWithoutClienteInput | ClienteProdutoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: ClienteProdutoScalarWhereInput | ClienteProdutoScalarWhereInput[]
  }

  export type ClienteServicoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<ClienteServicoCreateWithoutClienteInput, ClienteServicoUncheckedCreateWithoutClienteInput> | ClienteServicoCreateWithoutClienteInput[] | ClienteServicoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ClienteServicoCreateOrConnectWithoutClienteInput | ClienteServicoCreateOrConnectWithoutClienteInput[]
    upsert?: ClienteServicoUpsertWithWhereUniqueWithoutClienteInput | ClienteServicoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: ClienteServicoCreateManyClienteInputEnvelope
    set?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    disconnect?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    delete?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    connect?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    update?: ClienteServicoUpdateWithWhereUniqueWithoutClienteInput | ClienteServicoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: ClienteServicoUpdateManyWithWhereWithoutClienteInput | ClienteServicoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: ClienteServicoScalarWhereInput | ClienteServicoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClienteProdutoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<ClienteProdutoCreateWithoutClienteInput, ClienteProdutoUncheckedCreateWithoutClienteInput> | ClienteProdutoCreateWithoutClienteInput[] | ClienteProdutoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ClienteProdutoCreateOrConnectWithoutClienteInput | ClienteProdutoCreateOrConnectWithoutClienteInput[]
    upsert?: ClienteProdutoUpsertWithWhereUniqueWithoutClienteInput | ClienteProdutoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: ClienteProdutoCreateManyClienteInputEnvelope
    set?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    disconnect?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    delete?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    connect?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    update?: ClienteProdutoUpdateWithWhereUniqueWithoutClienteInput | ClienteProdutoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: ClienteProdutoUpdateManyWithWhereWithoutClienteInput | ClienteProdutoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: ClienteProdutoScalarWhereInput | ClienteProdutoScalarWhereInput[]
  }

  export type ClienteServicoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<ClienteServicoCreateWithoutClienteInput, ClienteServicoUncheckedCreateWithoutClienteInput> | ClienteServicoCreateWithoutClienteInput[] | ClienteServicoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ClienteServicoCreateOrConnectWithoutClienteInput | ClienteServicoCreateOrConnectWithoutClienteInput[]
    upsert?: ClienteServicoUpsertWithWhereUniqueWithoutClienteInput | ClienteServicoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: ClienteServicoCreateManyClienteInputEnvelope
    set?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    disconnect?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    delete?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    connect?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    update?: ClienteServicoUpdateWithWhereUniqueWithoutClienteInput | ClienteServicoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: ClienteServicoUpdateManyWithWhereWithoutClienteInput | ClienteServicoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: ClienteServicoScalarWhereInput | ClienteServicoScalarWhereInput[]
  }

  export type ClienteProdutoCreateNestedManyWithoutProdutoInput = {
    create?: XOR<ClienteProdutoCreateWithoutProdutoInput, ClienteProdutoUncheckedCreateWithoutProdutoInput> | ClienteProdutoCreateWithoutProdutoInput[] | ClienteProdutoUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: ClienteProdutoCreateOrConnectWithoutProdutoInput | ClienteProdutoCreateOrConnectWithoutProdutoInput[]
    createMany?: ClienteProdutoCreateManyProdutoInputEnvelope
    connect?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
  }

  export type ClienteProdutoUncheckedCreateNestedManyWithoutProdutoInput = {
    create?: XOR<ClienteProdutoCreateWithoutProdutoInput, ClienteProdutoUncheckedCreateWithoutProdutoInput> | ClienteProdutoCreateWithoutProdutoInput[] | ClienteProdutoUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: ClienteProdutoCreateOrConnectWithoutProdutoInput | ClienteProdutoCreateOrConnectWithoutProdutoInput[]
    createMany?: ClienteProdutoCreateManyProdutoInputEnvelope
    connect?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClienteProdutoUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<ClienteProdutoCreateWithoutProdutoInput, ClienteProdutoUncheckedCreateWithoutProdutoInput> | ClienteProdutoCreateWithoutProdutoInput[] | ClienteProdutoUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: ClienteProdutoCreateOrConnectWithoutProdutoInput | ClienteProdutoCreateOrConnectWithoutProdutoInput[]
    upsert?: ClienteProdutoUpsertWithWhereUniqueWithoutProdutoInput | ClienteProdutoUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: ClienteProdutoCreateManyProdutoInputEnvelope
    set?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    disconnect?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    delete?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    connect?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    update?: ClienteProdutoUpdateWithWhereUniqueWithoutProdutoInput | ClienteProdutoUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: ClienteProdutoUpdateManyWithWhereWithoutProdutoInput | ClienteProdutoUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: ClienteProdutoScalarWhereInput | ClienteProdutoScalarWhereInput[]
  }

  export type ClienteProdutoUncheckedUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<ClienteProdutoCreateWithoutProdutoInput, ClienteProdutoUncheckedCreateWithoutProdutoInput> | ClienteProdutoCreateWithoutProdutoInput[] | ClienteProdutoUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: ClienteProdutoCreateOrConnectWithoutProdutoInput | ClienteProdutoCreateOrConnectWithoutProdutoInput[]
    upsert?: ClienteProdutoUpsertWithWhereUniqueWithoutProdutoInput | ClienteProdutoUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: ClienteProdutoCreateManyProdutoInputEnvelope
    set?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    disconnect?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    delete?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    connect?: ClienteProdutoWhereUniqueInput | ClienteProdutoWhereUniqueInput[]
    update?: ClienteProdutoUpdateWithWhereUniqueWithoutProdutoInput | ClienteProdutoUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: ClienteProdutoUpdateManyWithWhereWithoutProdutoInput | ClienteProdutoUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: ClienteProdutoScalarWhereInput | ClienteProdutoScalarWhereInput[]
  }

  export type ClienteServicoCreateNestedManyWithoutServicoInput = {
    create?: XOR<ClienteServicoCreateWithoutServicoInput, ClienteServicoUncheckedCreateWithoutServicoInput> | ClienteServicoCreateWithoutServicoInput[] | ClienteServicoUncheckedCreateWithoutServicoInput[]
    connectOrCreate?: ClienteServicoCreateOrConnectWithoutServicoInput | ClienteServicoCreateOrConnectWithoutServicoInput[]
    createMany?: ClienteServicoCreateManyServicoInputEnvelope
    connect?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
  }

  export type ClienteServicoUncheckedCreateNestedManyWithoutServicoInput = {
    create?: XOR<ClienteServicoCreateWithoutServicoInput, ClienteServicoUncheckedCreateWithoutServicoInput> | ClienteServicoCreateWithoutServicoInput[] | ClienteServicoUncheckedCreateWithoutServicoInput[]
    connectOrCreate?: ClienteServicoCreateOrConnectWithoutServicoInput | ClienteServicoCreateOrConnectWithoutServicoInput[]
    createMany?: ClienteServicoCreateManyServicoInputEnvelope
    connect?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
  }

  export type ClienteServicoUpdateManyWithoutServicoNestedInput = {
    create?: XOR<ClienteServicoCreateWithoutServicoInput, ClienteServicoUncheckedCreateWithoutServicoInput> | ClienteServicoCreateWithoutServicoInput[] | ClienteServicoUncheckedCreateWithoutServicoInput[]
    connectOrCreate?: ClienteServicoCreateOrConnectWithoutServicoInput | ClienteServicoCreateOrConnectWithoutServicoInput[]
    upsert?: ClienteServicoUpsertWithWhereUniqueWithoutServicoInput | ClienteServicoUpsertWithWhereUniqueWithoutServicoInput[]
    createMany?: ClienteServicoCreateManyServicoInputEnvelope
    set?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    disconnect?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    delete?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    connect?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    update?: ClienteServicoUpdateWithWhereUniqueWithoutServicoInput | ClienteServicoUpdateWithWhereUniqueWithoutServicoInput[]
    updateMany?: ClienteServicoUpdateManyWithWhereWithoutServicoInput | ClienteServicoUpdateManyWithWhereWithoutServicoInput[]
    deleteMany?: ClienteServicoScalarWhereInput | ClienteServicoScalarWhereInput[]
  }

  export type ClienteServicoUncheckedUpdateManyWithoutServicoNestedInput = {
    create?: XOR<ClienteServicoCreateWithoutServicoInput, ClienteServicoUncheckedCreateWithoutServicoInput> | ClienteServicoCreateWithoutServicoInput[] | ClienteServicoUncheckedCreateWithoutServicoInput[]
    connectOrCreate?: ClienteServicoCreateOrConnectWithoutServicoInput | ClienteServicoCreateOrConnectWithoutServicoInput[]
    upsert?: ClienteServicoUpsertWithWhereUniqueWithoutServicoInput | ClienteServicoUpsertWithWhereUniqueWithoutServicoInput[]
    createMany?: ClienteServicoCreateManyServicoInputEnvelope
    set?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    disconnect?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    delete?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    connect?: ClienteServicoWhereUniqueInput | ClienteServicoWhereUniqueInput[]
    update?: ClienteServicoUpdateWithWhereUniqueWithoutServicoInput | ClienteServicoUpdateWithWhereUniqueWithoutServicoInput[]
    updateMany?: ClienteServicoUpdateManyWithWhereWithoutServicoInput | ClienteServicoUpdateManyWithWhereWithoutServicoInput[]
    deleteMany?: ClienteServicoScalarWhereInput | ClienteServicoScalarWhereInput[]
  }

  export type ClienteCreateNestedOneWithoutProdutosInput = {
    create?: XOR<ClienteCreateWithoutProdutosInput, ClienteUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutProdutosInput
    connect?: ClienteWhereUniqueInput
  }

  export type ProdutoCreateNestedOneWithoutClientesInput = {
    create?: XOR<ProdutoCreateWithoutClientesInput, ProdutoUncheckedCreateWithoutClientesInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutClientesInput
    connect?: ProdutoWhereUniqueInput
  }

  export type ClienteUpdateOneRequiredWithoutProdutosNestedInput = {
    create?: XOR<ClienteCreateWithoutProdutosInput, ClienteUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutProdutosInput
    upsert?: ClienteUpsertWithoutProdutosInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutProdutosInput, ClienteUpdateWithoutProdutosInput>, ClienteUncheckedUpdateWithoutProdutosInput>
  }

  export type ProdutoUpdateOneRequiredWithoutClientesNestedInput = {
    create?: XOR<ProdutoCreateWithoutClientesInput, ProdutoUncheckedCreateWithoutClientesInput>
    connectOrCreate?: ProdutoCreateOrConnectWithoutClientesInput
    upsert?: ProdutoUpsertWithoutClientesInput
    connect?: ProdutoWhereUniqueInput
    update?: XOR<XOR<ProdutoUpdateToOneWithWhereWithoutClientesInput, ProdutoUpdateWithoutClientesInput>, ProdutoUncheckedUpdateWithoutClientesInput>
  }

  export type ClienteCreateNestedOneWithoutServicosInput = {
    create?: XOR<ClienteCreateWithoutServicosInput, ClienteUncheckedCreateWithoutServicosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutServicosInput
    connect?: ClienteWhereUniqueInput
  }

  export type ServicoCreateNestedOneWithoutClientesInput = {
    create?: XOR<ServicoCreateWithoutClientesInput, ServicoUncheckedCreateWithoutClientesInput>
    connectOrCreate?: ServicoCreateOrConnectWithoutClientesInput
    connect?: ServicoWhereUniqueInput
  }

  export type ClienteUpdateOneRequiredWithoutServicosNestedInput = {
    create?: XOR<ClienteCreateWithoutServicosInput, ClienteUncheckedCreateWithoutServicosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutServicosInput
    upsert?: ClienteUpsertWithoutServicosInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutServicosInput, ClienteUpdateWithoutServicosInput>, ClienteUncheckedUpdateWithoutServicosInput>
  }

  export type ServicoUpdateOneRequiredWithoutClientesNestedInput = {
    create?: XOR<ServicoCreateWithoutClientesInput, ServicoUncheckedCreateWithoutClientesInput>
    connectOrCreate?: ServicoCreateOrConnectWithoutClientesInput
    upsert?: ServicoUpsertWithoutClientesInput
    connect?: ServicoWhereUniqueInput
    update?: XOR<XOR<ServicoUpdateToOneWithWhereWithoutClientesInput, ServicoUpdateWithoutClientesInput>, ServicoUncheckedUpdateWithoutClientesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ClienteProdutoCreateWithoutClienteInput = {
    quantidade: number
    produto: ProdutoCreateNestedOneWithoutClientesInput
  }

  export type ClienteProdutoUncheckedCreateWithoutClienteInput = {
    id?: number
    produtoId: string
    quantidade: number
  }

  export type ClienteProdutoCreateOrConnectWithoutClienteInput = {
    where: ClienteProdutoWhereUniqueInput
    create: XOR<ClienteProdutoCreateWithoutClienteInput, ClienteProdutoUncheckedCreateWithoutClienteInput>
  }

  export type ClienteProdutoCreateManyClienteInputEnvelope = {
    data: ClienteProdutoCreateManyClienteInput | ClienteProdutoCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type ClienteServicoCreateWithoutClienteInput = {
    quantidade: number
    servico: ServicoCreateNestedOneWithoutClientesInput
  }

  export type ClienteServicoUncheckedCreateWithoutClienteInput = {
    id?: number
    servicoId: string
    quantidade: number
  }

  export type ClienteServicoCreateOrConnectWithoutClienteInput = {
    where: ClienteServicoWhereUniqueInput
    create: XOR<ClienteServicoCreateWithoutClienteInput, ClienteServicoUncheckedCreateWithoutClienteInput>
  }

  export type ClienteServicoCreateManyClienteInputEnvelope = {
    data: ClienteServicoCreateManyClienteInput | ClienteServicoCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type ClienteProdutoUpsertWithWhereUniqueWithoutClienteInput = {
    where: ClienteProdutoWhereUniqueInput
    update: XOR<ClienteProdutoUpdateWithoutClienteInput, ClienteProdutoUncheckedUpdateWithoutClienteInput>
    create: XOR<ClienteProdutoCreateWithoutClienteInput, ClienteProdutoUncheckedCreateWithoutClienteInput>
  }

  export type ClienteProdutoUpdateWithWhereUniqueWithoutClienteInput = {
    where: ClienteProdutoWhereUniqueInput
    data: XOR<ClienteProdutoUpdateWithoutClienteInput, ClienteProdutoUncheckedUpdateWithoutClienteInput>
  }

  export type ClienteProdutoUpdateManyWithWhereWithoutClienteInput = {
    where: ClienteProdutoScalarWhereInput
    data: XOR<ClienteProdutoUpdateManyMutationInput, ClienteProdutoUncheckedUpdateManyWithoutClienteInput>
  }

  export type ClienteProdutoScalarWhereInput = {
    AND?: ClienteProdutoScalarWhereInput | ClienteProdutoScalarWhereInput[]
    OR?: ClienteProdutoScalarWhereInput[]
    NOT?: ClienteProdutoScalarWhereInput | ClienteProdutoScalarWhereInput[]
    id?: IntFilter<"ClienteProduto"> | number
    clienteId?: IntFilter<"ClienteProduto"> | number
    produtoId?: StringFilter<"ClienteProduto"> | string
    quantidade?: IntFilter<"ClienteProduto"> | number
  }

  export type ClienteServicoUpsertWithWhereUniqueWithoutClienteInput = {
    where: ClienteServicoWhereUniqueInput
    update: XOR<ClienteServicoUpdateWithoutClienteInput, ClienteServicoUncheckedUpdateWithoutClienteInput>
    create: XOR<ClienteServicoCreateWithoutClienteInput, ClienteServicoUncheckedCreateWithoutClienteInput>
  }

  export type ClienteServicoUpdateWithWhereUniqueWithoutClienteInput = {
    where: ClienteServicoWhereUniqueInput
    data: XOR<ClienteServicoUpdateWithoutClienteInput, ClienteServicoUncheckedUpdateWithoutClienteInput>
  }

  export type ClienteServicoUpdateManyWithWhereWithoutClienteInput = {
    where: ClienteServicoScalarWhereInput
    data: XOR<ClienteServicoUpdateManyMutationInput, ClienteServicoUncheckedUpdateManyWithoutClienteInput>
  }

  export type ClienteServicoScalarWhereInput = {
    AND?: ClienteServicoScalarWhereInput | ClienteServicoScalarWhereInput[]
    OR?: ClienteServicoScalarWhereInput[]
    NOT?: ClienteServicoScalarWhereInput | ClienteServicoScalarWhereInput[]
    id?: IntFilter<"ClienteServico"> | number
    clienteId?: IntFilter<"ClienteServico"> | number
    servicoId?: StringFilter<"ClienteServico"> | string
    quantidade?: IntFilter<"ClienteServico"> | number
  }

  export type ClienteProdutoCreateWithoutProdutoInput = {
    quantidade: number
    cliente: ClienteCreateNestedOneWithoutProdutosInput
  }

  export type ClienteProdutoUncheckedCreateWithoutProdutoInput = {
    id?: number
    clienteId: number
    quantidade: number
  }

  export type ClienteProdutoCreateOrConnectWithoutProdutoInput = {
    where: ClienteProdutoWhereUniqueInput
    create: XOR<ClienteProdutoCreateWithoutProdutoInput, ClienteProdutoUncheckedCreateWithoutProdutoInput>
  }

  export type ClienteProdutoCreateManyProdutoInputEnvelope = {
    data: ClienteProdutoCreateManyProdutoInput | ClienteProdutoCreateManyProdutoInput[]
    skipDuplicates?: boolean
  }

  export type ClienteProdutoUpsertWithWhereUniqueWithoutProdutoInput = {
    where: ClienteProdutoWhereUniqueInput
    update: XOR<ClienteProdutoUpdateWithoutProdutoInput, ClienteProdutoUncheckedUpdateWithoutProdutoInput>
    create: XOR<ClienteProdutoCreateWithoutProdutoInput, ClienteProdutoUncheckedCreateWithoutProdutoInput>
  }

  export type ClienteProdutoUpdateWithWhereUniqueWithoutProdutoInput = {
    where: ClienteProdutoWhereUniqueInput
    data: XOR<ClienteProdutoUpdateWithoutProdutoInput, ClienteProdutoUncheckedUpdateWithoutProdutoInput>
  }

  export type ClienteProdutoUpdateManyWithWhereWithoutProdutoInput = {
    where: ClienteProdutoScalarWhereInput
    data: XOR<ClienteProdutoUpdateManyMutationInput, ClienteProdutoUncheckedUpdateManyWithoutProdutoInput>
  }

  export type ClienteServicoCreateWithoutServicoInput = {
    quantidade: number
    cliente: ClienteCreateNestedOneWithoutServicosInput
  }

  export type ClienteServicoUncheckedCreateWithoutServicoInput = {
    id?: number
    clienteId: number
    quantidade: number
  }

  export type ClienteServicoCreateOrConnectWithoutServicoInput = {
    where: ClienteServicoWhereUniqueInput
    create: XOR<ClienteServicoCreateWithoutServicoInput, ClienteServicoUncheckedCreateWithoutServicoInput>
  }

  export type ClienteServicoCreateManyServicoInputEnvelope = {
    data: ClienteServicoCreateManyServicoInput | ClienteServicoCreateManyServicoInput[]
    skipDuplicates?: boolean
  }

  export type ClienteServicoUpsertWithWhereUniqueWithoutServicoInput = {
    where: ClienteServicoWhereUniqueInput
    update: XOR<ClienteServicoUpdateWithoutServicoInput, ClienteServicoUncheckedUpdateWithoutServicoInput>
    create: XOR<ClienteServicoCreateWithoutServicoInput, ClienteServicoUncheckedCreateWithoutServicoInput>
  }

  export type ClienteServicoUpdateWithWhereUniqueWithoutServicoInput = {
    where: ClienteServicoWhereUniqueInput
    data: XOR<ClienteServicoUpdateWithoutServicoInput, ClienteServicoUncheckedUpdateWithoutServicoInput>
  }

  export type ClienteServicoUpdateManyWithWhereWithoutServicoInput = {
    where: ClienteServicoScalarWhereInput
    data: XOR<ClienteServicoUpdateManyMutationInput, ClienteServicoUncheckedUpdateManyWithoutServicoInput>
  }

  export type ClienteCreateWithoutProdutosInput = {
    nome: string
    nomeSocial: string
    genero: string
    cpf: string
    rg: string
    telefone: string
    servicos?: ClienteServicoCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutProdutosInput = {
    id?: number
    nome: string
    nomeSocial: string
    genero: string
    cpf: string
    rg: string
    telefone: string
    servicos?: ClienteServicoUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutProdutosInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutProdutosInput, ClienteUncheckedCreateWithoutProdutosInput>
  }

  export type ProdutoCreateWithoutClientesInput = {
    id: string
    nome: string
    descricao: string
    valor: number
  }

  export type ProdutoUncheckedCreateWithoutClientesInput = {
    id: string
    nome: string
    descricao: string
    valor: number
  }

  export type ProdutoCreateOrConnectWithoutClientesInput = {
    where: ProdutoWhereUniqueInput
    create: XOR<ProdutoCreateWithoutClientesInput, ProdutoUncheckedCreateWithoutClientesInput>
  }

  export type ClienteUpsertWithoutProdutosInput = {
    update: XOR<ClienteUpdateWithoutProdutosInput, ClienteUncheckedUpdateWithoutProdutosInput>
    create: XOR<ClienteCreateWithoutProdutosInput, ClienteUncheckedCreateWithoutProdutosInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutProdutosInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutProdutosInput, ClienteUncheckedUpdateWithoutProdutosInput>
  }

  export type ClienteUpdateWithoutProdutosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeSocial?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    servicos?: ClienteServicoUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutProdutosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeSocial?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    servicos?: ClienteServicoUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ProdutoUpsertWithoutClientesInput = {
    update: XOR<ProdutoUpdateWithoutClientesInput, ProdutoUncheckedUpdateWithoutClientesInput>
    create: XOR<ProdutoCreateWithoutClientesInput, ProdutoUncheckedCreateWithoutClientesInput>
    where?: ProdutoWhereInput
  }

  export type ProdutoUpdateToOneWithWhereWithoutClientesInput = {
    where?: ProdutoWhereInput
    data: XOR<ProdutoUpdateWithoutClientesInput, ProdutoUncheckedUpdateWithoutClientesInput>
  }

  export type ProdutoUpdateWithoutClientesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type ProdutoUncheckedUpdateWithoutClientesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type ClienteCreateWithoutServicosInput = {
    nome: string
    nomeSocial: string
    genero: string
    cpf: string
    rg: string
    telefone: string
    produtos?: ClienteProdutoCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutServicosInput = {
    id?: number
    nome: string
    nomeSocial: string
    genero: string
    cpf: string
    rg: string
    telefone: string
    produtos?: ClienteProdutoUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutServicosInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutServicosInput, ClienteUncheckedCreateWithoutServicosInput>
  }

  export type ServicoCreateWithoutClientesInput = {
    id: string
    nome: string
    descricao: string
    valor: number
  }

  export type ServicoUncheckedCreateWithoutClientesInput = {
    id: string
    nome: string
    descricao: string
    valor: number
  }

  export type ServicoCreateOrConnectWithoutClientesInput = {
    where: ServicoWhereUniqueInput
    create: XOR<ServicoCreateWithoutClientesInput, ServicoUncheckedCreateWithoutClientesInput>
  }

  export type ClienteUpsertWithoutServicosInput = {
    update: XOR<ClienteUpdateWithoutServicosInput, ClienteUncheckedUpdateWithoutServicosInput>
    create: XOR<ClienteCreateWithoutServicosInput, ClienteUncheckedCreateWithoutServicosInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutServicosInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutServicosInput, ClienteUncheckedUpdateWithoutServicosInput>
  }

  export type ClienteUpdateWithoutServicosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    nomeSocial?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    produtos?: ClienteProdutoUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutServicosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    nomeSocial?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    produtos?: ClienteProdutoUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ServicoUpsertWithoutClientesInput = {
    update: XOR<ServicoUpdateWithoutClientesInput, ServicoUncheckedUpdateWithoutClientesInput>
    create: XOR<ServicoCreateWithoutClientesInput, ServicoUncheckedCreateWithoutClientesInput>
    where?: ServicoWhereInput
  }

  export type ServicoUpdateToOneWithWhereWithoutClientesInput = {
    where?: ServicoWhereInput
    data: XOR<ServicoUpdateWithoutClientesInput, ServicoUncheckedUpdateWithoutClientesInput>
  }

  export type ServicoUpdateWithoutClientesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type ServicoUncheckedUpdateWithoutClientesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
  }

  export type ClienteProdutoCreateManyClienteInput = {
    id?: number
    produtoId: string
    quantidade: number
  }

  export type ClienteServicoCreateManyClienteInput = {
    id?: number
    servicoId: string
    quantidade: number
  }

  export type ClienteProdutoUpdateWithoutClienteInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    produto?: ProdutoUpdateOneRequiredWithoutClientesNestedInput
  }

  export type ClienteProdutoUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteProdutoUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    produtoId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteServicoUpdateWithoutClienteInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    servico?: ServicoUpdateOneRequiredWithoutClientesNestedInput
  }

  export type ClienteServicoUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    servicoId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteServicoUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    servicoId?: StringFieldUpdateOperationsInput | string
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteProdutoCreateManyProdutoInput = {
    id?: number
    clienteId: number
    quantidade: number
  }

  export type ClienteProdutoUpdateWithoutProdutoInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    cliente?: ClienteUpdateOneRequiredWithoutProdutosNestedInput
  }

  export type ClienteProdutoUncheckedUpdateWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteProdutoUncheckedUpdateManyWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteServicoCreateManyServicoInput = {
    id?: number
    clienteId: number
    quantidade: number
  }

  export type ClienteServicoUpdateWithoutServicoInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    cliente?: ClienteUpdateOneRequiredWithoutServicosNestedInput
  }

  export type ClienteServicoUncheckedUpdateWithoutServicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteServicoUncheckedUpdateManyWithoutServicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}